<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue知识点总结(四.生命周期简介与钩子函数)</title>
      <link href="/2020/08/27/Vue%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E5%9B%9B-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2020/08/27/Vue%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E5%9B%9B-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="四-vue生命周期简介和钩子函数"><a href="#四-vue生命周期简介和钩子函数" class="headerlink" title="四.vue生命周期简介和钩子函数"></a>四.vue生命周期简介和钩子函数</h1><blockquote><p>纯属随笔记录，具体详细教程，请查阅<a href="https://vuejs.bootcss.com/guide/">vue.js官网</a></p><p>本篇文章参考自:</p><p>作者：赵客缦胡缨v吴钩霜雪明<br>链接：<a href="https://www.jianshu.com/p/49563e2ad40b">https://www.jianshu.com/p/49563e2ad40b</a></p></blockquote><ul><li><h2 id="什么是生命周期"><a href="#什么是生命周期" class="headerlink" title="什么是生命周期?"></a>什么是生命周期?</h2><p><strong>Vue 的生命周期是</strong>： vue 实例从创建到销毁，也就是从<code>开始创建</code>、<code>初始化数据</code>、<code>编译模板</code>、<code>挂载Dom→渲染</code>、<code>更新→渲染</code>、<code>销毁</code>等一系列过程。就比如我们从出生到死亡所经历的一个个阶段。</p></li><li><h2 id="什么是钩子函数"><a href="#什么是钩子函数" class="headerlink" title="什么是钩子函数?"></a>什么是钩子函数?</h2><p>在<strong>Vue 的生命周期的</strong>过程中也可以执行一些特定的<strong>生命周期钩子的函数</strong>，这给了用户在不同阶段添加完善代码的机会。一般特定的钩子做特定的事。</p></li><li><h2 id="Vue生命周期图例"><a href="#Vue生命周期图例" class="headerlink" title="Vue生命周期图例:"></a>Vue生命周期图例:</h2><p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/27/d45ozd.png" alt="Vue生命周期图例"></p></li><li><h2 id="Vue8种生命周期函数-钩子函数-："><a href="#Vue8种生命周期函数-钩子函数-：" class="headerlink" title="Vue8种生命周期函数(钩子函数)："></a>Vue8种生命周期函数(钩子函数)：</h2><ol><li><p><code>beforeCreate</code>：</p><h4 id="官方解释"><a href="#官方解释" class="headerlink" title="官方解释:"></a>官方解释:</h4><p>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。</p><h4 id="详细解释"><a href="#详细解释" class="headerlink" title="详细解释:"></a>详细解释:</h4><p>注意是 <strong>之前</strong>，这个时期，this变量还不能使用，在data下的数据，watcher中的事件都不能获得到；这个时候的vue实例还什么都没有，但是$route对象是存在的，可以根据路由信息进行重定向之类的操作。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> Vue.component(<span class="string">&quot;temp&quot;</span>, &#123;</span><br><span class="line">            template: <span class="string">&quot;&lt;h3&gt;&#123;&#123;money&#125;&#125;&lt;/h3&gt;&quot;</span>,</span><br><span class="line">            data() &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    money: <span class="number">2000</span></span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                add()&#123;</span><br><span class="line">                    <span class="built_in">this</span>.money++</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            beforeCreate() &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;data&#x27;</span>, <span class="built_in">this</span>.money);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;methods&#x27;</span>,<span class="built_in">this</span>.add);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p><strong>效果:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200828/9qMIwah*lYLy.png" alt="效果图"></p></li></ul><hr></li><li><p><code>created</code>:</p><h4 id="官方解释-1"><a href="#官方解释-1" class="headerlink" title="官方解释:"></a>官方解释:</h4><p>在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，property 和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，<code>$el</code> property 目前尚不可用。</p><h4 id="详细解释-1"><a href="#详细解释-1" class="headerlink" title="详细解释:"></a>详细解释:</h4><p>这个时候可以操作Vue实例中的数据和各种方法，但是还不能对<code>‘dom’</code>节点进行操作:比如 <code>this.data</code> 可以访问，watcher、events、methods也出现了，若根据后台接口动态改变data和methods的场景下，可以使用。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  Vue.component(<span class="string">&quot;temp&quot;</span>, &#123;</span><br><span class="line">            template: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">              &lt;h3&gt;&#123;&#123;money&#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">              &lt;button&gt;按钮&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            `</span>,</span><br><span class="line">            data() &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    money: <span class="number">2000</span></span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                add()&#123;</span><br><span class="line">                    <span class="built_in">this</span>.money++</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            created() &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;data&#x27;</span>, <span class="built_in">this</span>.money);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;methods&#x27;</span>,<span class="built_in">this</span>.add);</span><br><span class="line">                $(<span class="string">&#x27;button&#x27;</span>).css(<span class="string">&#x27;display&#x27;</span>,<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p><strong>效果:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200828/8cytdbY@@pNp.png" alt="后台输出数据"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200828/UMtl3Ch7WTFQ.png" alt="jquery操作dom元素失败"></p></li></ul><hr></li><li><p><code>beforeMount</code>:</p><h4 id="官方解释-2"><a href="#官方解释-2" class="headerlink" title="官方解释:"></a>官方解释:</h4><p>在挂载开始之前被调用：相关的 <code>render</code> 函数首次被调用。</p><p>该钩子在服务器端渲染期间不被调用。</p><h4 id="详细解释-2"><a href="#详细解释-2" class="headerlink" title="详细解释:"></a>详细解释:</h4><p>载入前（完成了data和el数据初始化），但是页面中的内容还是vue中的占位符，data中的message信息没有被挂在到Bom节点中，在这里可以在渲染前最后一次更改数据的机会，不会触发其他的钩子函数，一般可以在这里做初始数据的获取,<strong>在实际操作中，很多beforeMount阶段干的活在created阶段基本都能做。</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&quot;temp&quot;</span>, &#123;</span><br><span class="line">            template: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">              &lt;h3&gt;&#123;&#123;money&#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">              &lt;button&gt;按钮&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            `</span>,</span><br><span class="line">            data() &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    money: <span class="number">2000</span></span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                add()&#123;</span><br><span class="line">                    <span class="built_in">this</span>.money++</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            beforeMount() &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;data&#x27;</span>, <span class="built_in">this</span>.money);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;methods&#x27;</span>,<span class="built_in">this</span>.add);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;$el&#x27;</span>,<span class="built_in">this</span>.$el);</span><br><span class="line">                $(<span class="string">&#x27;button&#x27;</span>).css(<span class="string">&#x27;display&#x27;</span>,<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p><strong>效果:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200828/D6!oDV3U6xjE.png" alt="跟created差不多"></p></li></ul><hr></li><li><p><code>mounted</code>:</p><h4 id="官方解释-3"><a href="#官方解释-3" class="headerlink" title="官方解释:"></a>官方解释:</h4><p>实例被挂载后调用，这时 <code>el</code> 被新创建的 <code>vm.$el</code> 替换了。如果根实例挂载到了一个文档内的元素上，当 <code>mounted</code> 被调用时 <code>vm.$el</code> 也在文档内。</p><h4 id="详细解释-3"><a href="#详细解释-3" class="headerlink" title="详细解释:"></a>详细解释:</h4><p>挂载完毕，这时<code>dom</code>节点被渲染到文档内，一些需要<code>dom</code>的操作在此时才能正常进行。此时元素已经渲染完成了，依赖于DOM的代码就放在这里吧~比如监听DOM事件。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&quot;temp&quot;</span>, &#123;</span><br><span class="line">            template: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">              &lt;h3&gt;&#123;&#123;money&#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">              &lt;button&gt;按钮&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            `</span>,</span><br><span class="line">            data() &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    money: <span class="number">2000</span></span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                add()&#123;</span><br><span class="line">                    <span class="built_in">this</span>.money++</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            mounted() &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;data&#x27;</span>, <span class="built_in">this</span>.money);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;methods&#x27;</span>,<span class="built_in">this</span>.add);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;$el&#x27;</span>,<span class="built_in">this</span>.$el);</span><br><span class="line">                $(<span class="string">&#x27;button&#x27;</span>).css(<span class="string">&#x27;display&#x27;</span>,<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p><strong>效果:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200828/Es4IhMdq9URo.png" alt="按钮消失了，可以操作dom了"></p></li></ul><hr></li><li><p><code>beforeUpdate</code>:</p><h4 id="官方解释-4"><a href="#官方解释-4" class="headerlink" title="官方解释:"></a>官方解释:</h4><p>数据更新时调用，发生在虚拟 DOM 打补丁之前。这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。</p><p><strong>该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务端进行。</strong></p><h4 id="详细解释-4"><a href="#详细解释-4" class="headerlink" title="详细解释:"></a>详细解释:</h4><p>对应的钩子函数是beforeUpdate。在这一阶段，vue遵循数据驱动DOM的原则；beforeUpdate函数在数据更新后虽然没立即更新数据，但是DOM中的数据会改变，这是Vue双向数据绑定的作用。</p><p><strong>只有view上面的数据变化才会触发beforeUpdate和updated，仅属于data中的数据改变是并不能触发</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&quot;temp&quot;</span>, &#123;</span><br><span class="line">            template: <span class="string">`</span></span><br><span class="line"><span class="string">         &lt;div&gt;</span></span><br><span class="line"><span class="string">              &lt;h3&gt;&#123;&#123;money&#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">              &lt;button @click = &quot;add&quot;&gt;按钮&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            `</span>,</span><br><span class="line">            data() &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    money: <span class="number">2000</span>,</span><br><span class="line">                    message: <span class="string">&#x27;abcd&#x27;</span></span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                add()&#123;</span><br><span class="line">                    <span class="built_in">this</span>.money++</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            beforeUpdate() &#123;</span><br><span class="line">              <span class="built_in">console</span>.group(<span class="string">&#x27;beforeUpdate 更新前状态 ------------&gt;&#x27;</span>);</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:red&quot;</span>,<span class="string">&quot;el     : &quot;</span> + <span class="built_in">this</span>.$el);</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el);</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">&#x27;真实dom结构：&#x27;</span>+<span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>).innerHTML);</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:red&quot;</span>,<span class="string">&quot;data   : &quot;</span> + <span class="built_in">this</span>.$data);</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:red&quot;</span>,<span class="string">&quot;message: &quot;</span> + <span class="built_in">this</span>.message);</span><br><span class="line">            &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p><strong>效果:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200829/1M@bjJ7ey0nN.png" alt="初始效果"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200829/h8pg78!ekNfw.png" alt="点击按钮后，触发beforeUpdate,看dom结构并更新"></p></li></ul><hr></li><li><p><code>updated</code>:</p><h4 id="官方解释-5"><a href="#官方解释-5" class="headerlink" title="官方解释:"></a>官方解释:</h4><p>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</p><p>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用<a href="https://vuejs.bootcss.com/api/#computed">计算属性</a>或 <a href="https://vuejs.bootcss.com/api/#watch">watcher</a> 取而代之。</p><h4 id="详细解释-5"><a href="#详细解释-5" class="headerlink" title="详细解释:"></a>详细解释:</h4><p>当这个钩子被调用时，组件DOM的data已经更新，所以你现在可以执行依赖于DOM的操作。<strong>但是不要在此时修改data，否则会继续触发beforeUpdate、updated这两个生命周期，进入死循环！</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&quot;temp&quot;</span>, &#123;</span><br><span class="line">            template: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">              &lt;h3&gt;&#123;&#123;money&#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">              &lt;button @click = &quot;add&quot;&gt;按钮&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            `</span>,</span><br><span class="line">            data() &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    money: <span class="number">2000</span>,</span><br><span class="line">                    message: <span class="string">&#x27;abcd&#x27;</span></span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                add()&#123;</span><br><span class="line">                    <span class="built_in">this</span>.money++</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            updated() &#123;</span><br><span class="line">              <span class="built_in">console</span>.group(<span class="string">&#x27;updated 更新完成状态 ------------&gt;&#x27;</span>);</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:red&quot;</span>,<span class="string">&quot;el     : &quot;</span> + <span class="built_in">this</span>.$el);</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el);</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">&#x27;真实dom结构：&#x27;</span>+<span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>).innerHTML);</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:red&quot;</span>,<span class="string">&quot;data   : &quot;</span> + <span class="built_in">this</span>.$data);</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:red&quot;</span>,<span class="string">&quot;message: &quot;</span> + <span class="built_in">this</span>.message);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p><strong>效果:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200829/6y!0YReydXBe.png" alt="与beforeUpdate对比，按下按钮后dom结构更新了"></p></li></ul><hr></li><li><p><code>beforeDestroy</code>:</p><h4 id="官方解释-6"><a href="#官方解释-6" class="headerlink" title="官方解释:"></a>官方解释:</h4><p>实例销毁之前调用。在这一步，实例仍然完全可用。</p><p><strong>该钩子在服务器端渲染期间不被调用。</strong></p><h4 id="详细解释-6"><a href="#详细解释-6" class="headerlink" title="详细解释:"></a>详细解释:</h4><p>在这一步，实例仍然完全可用。实例要被销毁了，在被销毁之前做一些校验和判断。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  Vue.component(<span class="string">&quot;temp&quot;</span>, &#123;</span><br><span class="line">            template: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">              &lt;h3&gt;&#123;&#123;money&#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">              &lt;button @click = &quot;destroy&quot;&gt;按钮&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            `</span>,</span><br><span class="line">            data() &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    money: <span class="number">2000</span>,</span><br><span class="line">                    message: <span class="string">&#x27;abcd&#x27;</span></span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                destroy()&#123;</span><br><span class="line">                    <span class="built_in">this</span>.$destroy()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            beforeDestroy: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.group(<span class="string">&#x27;beforeDestroy 销毁前状态===============》&#x27;</span>);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:red&quot;</span>,<span class="string">&quot;el     : &quot;</span> + <span class="built_in">this</span>.$el);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el);    </span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:red&quot;</span>,<span class="string">&quot;data   : &quot;</span> + <span class="built_in">this</span>.$data); </span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:red&quot;</span>,<span class="string">&quot;message: &quot;</span> + <span class="built_in">this</span>.message); </span><br><span class="line">            &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p><strong>效果:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200829/LbO@nLYIUPnD.png" alt="点击按钮后销毁实例，触发beforeDestroy"></p></li></ul><hr></li><li><p><code>destroyed</code>:</p><h4 id="官方解释-7"><a href="#官方解释-7" class="headerlink" title="官方解释:"></a>官方解释:</h4><p>实例销毁后调用。该钩子被调用后，对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。</p><p><strong>该钩子在服务器端渲染期间不被调用。</strong></p><h4 id="详细解释-7"><a href="#详细解释-7" class="headerlink" title="详细解释:"></a>详细解释:</h4><p>此时，Vue实例指示的所有东西已经解绑定，所有的事件监听器都已经被移除，所有的子实例也已经被销毁。这时候能做的事情已经不多了，只能加点儿提示toast之类的东西吧。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> Vue.component(<span class="string">&quot;temp&quot;</span>, &#123;</span><br><span class="line">            template: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">              &lt;h3&gt;&#123;&#123;money&#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">              &lt;button @click = &quot;destroy&quot;&gt;按钮&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            `</span>,</span><br><span class="line">            data() &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    money: <span class="number">2000</span>,</span><br><span class="line">                    message: <span class="string">&#x27;abcd&#x27;</span></span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                destroy()&#123;</span><br><span class="line">                    <span class="built_in">this</span>.$destroy()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            destroyed() &#123;</span><br><span class="line">                <span class="built_in">console</span>.group(<span class="string">&#x27;destroyed 销毁完成状态 ------------&gt;&#x27;</span>);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:red&quot;</span>,<span class="string">&quot;el     : &quot;</span> + <span class="built_in">this</span>.$el);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:red&quot;</span>,<span class="string">&quot;data   : &quot;</span> + <span class="built_in">this</span>.$data);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:red&quot;</span>,<span class="string">&quot;message: &quot;</span> + <span class="built_in">this</span>.message)</span><br><span class="line">            &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p><strong>效果:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200829/I8^i^MFNIC0D.png" alt="点击按钮后，触发destroyed销毁完成"></p><ul><li><p><strong>注:</strong></p><p>可以发现beforeDestory和destoryed打印出来的结果并没有什么特别，el的值data的数据依然在的。这是因为$destroy只是销毁一个实例，清理它与其它实例的连接，解绑它的全部指令及事件监听器，并不会清除data的数据或者清除dom。具体可看官方文档</p></li></ul></li></ul><hr></li><li><p><code>activated</code>:</p><h4 id="官方解释-8"><a href="#官方解释-8" class="headerlink" title="官方解释:"></a>官方解释:</h4><p>被 keep-alive 缓存的组件激活时调用。</p><p><strong>该钩子在服务器端渲染期间不被调用。</strong></p><h4 id="详细解释-8"><a href="#详细解释-8" class="headerlink" title="详细解释:"></a>详细解释:</h4><p>页面出现的时候执行 activated生命周期函数，跟监听 watch 有类似的作用。activated生命周期函数，是配合 keep-alive 进行使用或者路由跳转。进入页面时，mounted 与 activated 生命周期函数都会执行，当前 keep-alive 时或者路由跳转，进行了缓存，这时返回上一页 ，mounted生命周期函数不会执行，而 activated 会执行。组件被激活后的钩子函数，每次回到页面都会执行</p><hr></li><li><p><code>deactivated</code>:</p><h4 id="官方解释-9"><a href="#官方解释-9" class="headerlink" title="官方解释:"></a>官方解释:</h4><p>被 keep-alive 缓存的组件停用时调用。</p><p><strong>该钩子在服务器端渲染期间不被调用。</strong></p><h4 id="详细解释-9"><a href="#详细解释-9" class="headerlink" title="详细解释:"></a>详细解释:</h4><p>该钩子函数配合keep-alive来使用，使用了keep-alive就不会调用beforeDestory和destoryed钩子了，因为组件没有被销毁，而是被缓存起来了，所以deactivated钩子可以看做是beforeDestory和destoryed的替代。</p><hr></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> 系列 </category>
          
          <category> 知识点总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系列 </tag>
            
            <tag> Vue </tag>
            
            <tag> 生命周期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue知识点总结(三.Vue实例的属性和方法)</title>
      <link href="/2020/08/26/Vue%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E4%B8%89-Vue%E5%AE%9E%E4%BE%8B%E7%9A%84%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95/"/>
      <url>/2020/08/26/Vue%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E4%B8%89-Vue%E5%AE%9E%E4%BE%8B%E7%9A%84%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue实例的属性和方法"><a href="#Vue实例的属性和方法" class="headerlink" title="Vue实例的属性和方法"></a>Vue实例的属性和方法</h1><blockquote><p>纯属随笔记录，具体详细教程，请查阅<a href="https://vuejs.bootcss.com/guide/">vue.js官网</a></p><p><strong><code>Vue</code> 实例暴露了一些有用的实例属性与方法。这些属性与方法都有前缀 <code>$</code>，以便与代理的数据属性区分</strong></p></blockquote><ul><li><h2 id="Vue实例的常用属性"><a href="#Vue实例的常用属性" class="headerlink" title="Vue实例的常用属性:"></a>Vue实例的常用属性:</h2><ol><li><p><code>vm.$el</code>:  指定要绑定的元素,用来挂载当前组件实例的<code>dom</code>元素</p><ul><li><strong>例子:</strong></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><hr></li><li><p><code>vm.$data</code>: 实例的数据对象,用来访问组件实例观察的数据对象</p><ul><li><strong>例子:</strong></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            message: <span class="string">&#x27;数据&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr></li><li><p><code>vm.$options</code>: 获取自定义属性的值,用来访问组件实例化时的初始化选项对象</p><ul><li><strong>例子:</strong></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  userOption: <span class="string">&#x27;我是自定义属性&#x27;</span>,</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$options.userOption) <span class="comment">// =&gt; &#x27;我是自定义属性&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr></li></ol></li></ul><ol start="4"><li><p><code>vm.$refs</code>: 获取所有<code>ref</code>属性的标签，获取持有注册过 <code>ref</code>属性的所有 DOM 元素和组件实例。</p><ul><li><strong>例子:</strong></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 在子组件或普通DOM元素中注册ref:</span><br><span class="line">&lt;child-item ref = <span class="string">&quot;userItem&quot;</span>&gt;&lt;/child-item&gt;</span><br><span class="line">&lt;p ref = <span class="string">&quot;pItem&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"># 在父组件或者Vue实例中获取对应ref属性的标签:</span><br><span class="line"><span class="built_in">this</span>.$refs.userItem</span><br><span class="line"><span class="built_in">this</span>.$refs.pItem</span><br></pre></td></tr></table></figure></li></ol><hr><ol start="5"><li><p><code>vm.$root</code>: 当前组件树的根 Vue 实例。如果当前实例没有父实例，此实例将会是其自己。</p><ul><li><strong>例子:</strong></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 将公共数据放再vue根实例上(可以理解为一个全局 store ),因此可以代替vuex实现状态管理；</span><br><span class="line"># 在每个 new Vue 实例的子组件中，其根实例可以通过 $root 属性进行访问。</span><br><span class="line"><span class="built_in">this</span>.$root.根实例上的属性/方法/等</span><br></pre></td></tr></table></figure><hr></li><li><p><code>vm.$children</code>: 用来访问当前组件实例的直接子组件实例</p><ul><li><strong>例子:</strong></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 返回的是一个数组，是直接子组件的集合，关于具体是第几个儿子，那么儿子里面有个 _uid 属性，可以知道他是第几个元素，是元素的唯一标识符，根据这个属性，我们可以进行其他的操作</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="built_in">this</span>.$children.length;i++)&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.$children[i].msg);输出子组件的msg数据；</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><hr><ol start="7"><li><p><code>vm.$parent</code>: 用来访问组件实例的父实例，如果有的话</p><ul><li><strong>例子:</strong></li></ul><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 子组件可以直接,修改或者访问它的父组件的数据，前提是有父组件</span><br><span class="line">this.$parent.a = &quot;666&quot; # 通过子组件修改父组件中的a属性的值</span><br></pre></td></tr></table></figure><hr></li></ol><ul><li><h2 id="Vue实例的常用方法"><a href="#Vue实例的常用方法" class="headerlink" title="Vue实例的常用方法:"></a>Vue实例的常用方法:</h2><ol><li><p><code>　vm.$set( target, key, value )</code>: 向响应式对象中添加一个属性，并确保这个新属性同样是响应式的，且触发视图更新。</p><ul><li><p>全局方法: <code>Vue.set(target,key,value)</code></p></li><li><p><strong>例子:</strong></p></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># target参数可以是对象也可以是数组(&#123;Object | Array&#125;)</span><br><span class="line"># key参数取决于target:&#123;string | number&#125; propertyName/index</span><br><span class="line">vm.$set(object,propertyName,value)</span><br><span class="line">vm.$set(array,index,value)</span><br><span class="line">#添加属性值</span><br><span class="line">Vue.set(<span class="built_in">this</span>.user,<span class="string">&#x27;age&#x27;</span>,<span class="number">18</span>)</span><br><span class="line">Vue.set(<span class="built_in">this</span>.hobby,<span class="number">3</span>,<span class="string">&#x27;打篮球&#x27;</span>)</span><br></pre></td></tr></table></figure><hr></li><li><p><code>vm.$delete(target,key)</code>: 删除属性值</p><ul><li>全局方法: <code>Vue.delete(target,key)</code></li><li><strong>例子:</strong></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># target参数可以是对象也可以是数组(&#123;Object | Array&#125;)</span><br><span class="line"># key参数取决于target:&#123;string | number&#125; propertyName/index</span><br><span class="line">vm.$delete(object,propertyName)</span><br><span class="line">vm.$delete(array,index)</span><br><span class="line">#删除属性值</span><br><span class="line">Vue.delete(<span class="built_in">this</span>.user,<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line">Vue.delete(<span class="built_in">this</span>.hobby,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><hr></li><li><p><code>vm.$watch(data,callback[,options])</code>: 更新属性值,观测数据变化</p><ul><li><strong>例子:</strong></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 观测data值发生的变化，使用时callback可以传两个参数，一个是oldValue，另一个是newValue</span><br><span class="line"># 一旦观测值发生变化，就会调用后面的回调函数</span><br><span class="line">vm.$watch(<span class="string">&#x27;message&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;message发生了修改&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"># 观测普通属性值可直接使用:</span><br><span class="line"> watch : &#123;</span><br><span class="line">             message : <span class="function"><span class="keyword">function</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span><br><span class="line">             <span class="built_in">console</span>.log(<span class="string">&quot;message发生了修改&quot;</span>);</span><br><span class="line">              &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>选项(options)：deep</strong>: 为了发现对象内部值的变化，可以在选项参数中指定 <code>deep: true</code>。注意监听数组的变更不需要这么做。</li><li>**注: **当需要监听复杂数据类型(对象)的改变时，普通的watch方法无法监听到对象内部属性的改变，只有data中的数据才能够监听到变化，此时就需要deep属性对对象进行深度监听。</li><li><strong>例子:</strong></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">        a: <span class="function"><span class="keyword">function</span>(<span class="params">newValue, oldValue</span>) </span>&#123;</span><br><span class="line">          <span class="comment">//普通的watch监听</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;a: &quot;</span> + val, oldVal);</span><br><span class="line">        &#125;,</span><br><span class="line">        b: &#123;</span><br><span class="line">          <span class="comment">//深度监听，可监听到对象的变化</span></span><br><span class="line">          handler(newValue, oldValue) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;b.c: &quot;</span> + val.c, oldVal.c);</span><br><span class="line">          &#125;,</span><br><span class="line">          deep: <span class="literal">true</span>, <span class="comment">//true 深度监听</span></span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> 系列 </category>
          
          <category> 知识点总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系列 </tag>
            
            <tag> Vue </tag>
            
            <tag> 属性和方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue知识点总结(二.组件化开发)</title>
      <link href="/2020/08/20/Vue%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E4%BA%8C-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/"/>
      <url>/2020/08/20/Vue%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E4%BA%8C-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue组件化"><a href="#Vue组件化" class="headerlink" title="Vue组件化"></a>Vue组件化</h1><blockquote><p>纯属随笔记录，具体详细教程，请查阅<a href="https://vuejs.bootcss.com/guide/">vue.js官网</a></p></blockquote><h2 id="1-组件化的概念"><a href="#1-组件化的概念" class="headerlink" title="1.组件化的概念:"></a>1.组件化的概念:</h2><p>在Vue中，组件是一个很强大的功能，组件可以扩展HTML元素，封装可重用的代码。比如在页面当中的某一个部分需要在多个场景中使用，那么我们可以将其抽出为一个组件来进行复用。组件可以大大提高了代码的复用率。就比如像是一台电脑中的每一个元件部分(键盘，鼠标，显卡，显示屏，硬盘等等)，它是一个具有独立的逻辑和功能或界面，同时又能根据规定的接口规则进行相互融合，变成一个完整的应用，页面就是有一个个类似这样的部分组成，比如导航、列表、弹窗、下拉菜单等。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200821/0AiQe^JJfD!H.jpg" alt="组件化模型图"></p><hr><h2 id="2-组件化开发的优点"><a href="#2-组件化开发的优点" class="headerlink" title="2.组件化开发的优点:"></a>2.组件化开发的优点:</h2><ol><li>高效: 提高开发效率</li><li>分治: 便于协同开发,提升整个项目的可维护性</li><li>重用: 方便重复使用</li><li>组合: 简化调试步骤,简洁方便</li></ol><hr><h2 id="3-组件注册方式"><a href="#3-组件注册方式" class="headerlink" title="3.组件注册方式:"></a>3.组件注册方式:</h2><h4 id="Vue又分为全局注册和局部注册两种方式来注册组件。全局组件它可以在任何-根-实列中使用的组件，局部组件只能在某一实列中使用的组件。"><a href="#Vue又分为全局注册和局部注册两种方式来注册组件。全局组件它可以在任何-根-实列中使用的组件，局部组件只能在某一实列中使用的组件。" class="headerlink" title="Vue又分为全局注册和局部注册两种方式来注册组件。全局组件它可以在任何(根)实列中使用的组件，局部组件只能在某一实列中使用的组件。"></a>Vue又分为全局注册和局部注册两种方式来注册组件。全局组件它可以在任何(根)实列中使用的组件，局部组件只能在某一实列中使用的组件。</h4><ul><li><h3 id="全局注册组件"><a href="#全局注册组件" class="headerlink" title="全局注册组件:"></a>全局注册组件:</h3><ul><li><p><strong>语法:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用:</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    组件名称</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line"># 注册:</span><br><span class="line">Vue.component(组件名称,&#123;</span><br><span class="line">    data: 组件数据,</span><br><span class="line">    template: 组件模板内容</span><br><span class="line">    其他选项...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>例子</strong>:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;button-counter&#x27;</span>,&#123;</span></span><br><span class="line"><span class="javascript">      data: <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line">          count: 0</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="handlebars"><span class="xml">      template: &#x27;<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span> = <span class="string">&quot;count++&quot;</span>&gt;</span>点击了</span><span class="template-variable">&#123;&#123;<span class="name">count</span>&#125;&#125;</span><span class="xml">次<span class="tag">&lt;/<span class="name">button</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data:&#123;</span><br><span class="line">          </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>效果:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200821/!!Z7XSxkn*wJ.png" alt="初始效果"></p></li></ul></li></ul><p>​                                                                                      <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200821/EME@47rRsN!n.png" alt="点击后的效果"></p><p>​                                                             <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200821/LreGqO!^idce.png" alt="组件复用,用了三次的效果"></p><h4 id="注"><a href="#注" class="headerlink" title="注:"></a>注:</h4><p>​                1.组件是可以复用的，而且每个组件的数据相互独立。</p><p>​                2.每一个组件的选项都包括一个Vue实例的完整内容，比如methods，computed，data等还有生命周期                函数。</p><p>​                3.使用自定义组件之前必须注册。</p><p>​                4.<code>data</code>必须是一个函数，与普通Vue对象实例比较。</p><p>​                5. 组件模板内容必须是单个根元素。</p><p>​                6.组件模板内容可以是模板字符串。</p><p>​                7.全局组件使用范围：可以在页面中任何位置使用</p><hr><ul><li><h3 id="局部组件注册"><a href="#局部组件注册" class="headerlink" title="局部组件注册:"></a>局部组件注册:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 使用:</span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;hello-world&gt;&lt;/hello-world&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"># 注册:</span><br><span class="line"><span class="keyword">var</span> children = &#123;</span><br><span class="line">    template: <span class="string">&#x27;&lt;h1&gt;Hello World&lt;/h1&gt;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    components:&#123;</span><br><span class="line">      <span class="string">&#x27;HelloWorld&#x27;</span>: children</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><strong>或者在项目中一般进行组件化开发时这样:</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">&#x27;./components/HelloWorld&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    HelloWorld</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>效果:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200822/NwxnxPSY^^sL.png" alt="效果图"></p></li></ul><h3 id="注-1"><a href="#注-1" class="headerlink" title="注:"></a>注:</h3><ol><li>局部组件使用范围：只能在定义它的el中使用，不能再其他位置使用，否则就无法生效</li><li>属性名是<code>components</code>，千万别忘了加s与注册全局组件时的<code>component</code>区分开</li><li><code>data</code>必须是一个函数，与普通Vue对象实例比较。与全局组件一样</li><li>注意用es5和es6语法写，this的指向问题，在非根组件中<code>this</code>指向的都是Vue实例，而在根组件中es6语法指向的是<code>window</code></li></ol></li></ul><hr><ul><li><h3 id="组件命名方式"><a href="#组件命名方式" class="headerlink" title="组件命名方式:"></a>组件命名方式:</h3></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 短横线方式</span><br><span class="line">Vue.component(<span class="string">&#x27;my-component&#x27;</span>,&#123;...&#125;)</span><br><span class="line"> </span><br><span class="line"># 驼峰方式</span><br><span class="line">Vue.component(<span class="string">&#x27;MyComponent&#x27;</span>,&#123;...&#125;)</span><br></pre></td></tr></table></figure><ul><li>注: 如果使用驼峰式命名组件，那么真使用组件的时候，只能在字符串模板中用驼峰的方式使用组件，但是在普通的标签模板(HTML中的挂载点)中，必须使用短横线的方式使用组件。如何使用看个人喜好</li></ul><hr><ul><li><h3 id="组件间的数据交互"><a href="#组件间的数据交互" class="headerlink" title="组件间的数据交互:"></a>组件间的数据交互:</h3><p><strong>图例:</strong></p><p>​                                     <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200823/zhdPYdrzoA0M.png" alt="组件间的数据交互视图:"></p><ol><li><h4 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值:"></a>父组件向子组件传值:</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 组件内部通过props接收传递过来的值</span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;childItem&#x27;</span>,&#123;</span><br><span class="line">      props:[<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">      template: <span class="string">&#x27;&lt;h2&gt;&#123;&#123;title&#125;&#125;&lt;/h2&gt;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"># 父组件通过属性将值传递给子组件</span><br><span class="line"></span><br><span class="line">&lt;child-item :title = &quot;title&quot;&gt;&lt;/child-item&gt;    #动态绑定</span><br><span class="line">&lt;child-item title = &quot;静态传递父组件到子组件&quot;&gt;&lt;/child-item&gt;   #静态传值</span><br></pre></td></tr></table></figure><ul><li><strong>例子:</strong></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;child-item :title = <span class="string">&quot;title&quot;</span>&gt;&lt;/child-item&gt;</span><br><span class="line">    &lt;child-item title = <span class="string">&quot;静态传递父组件到子组件&quot;</span>&gt;&lt;/child-item&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    Vue.component(<span class="string">&#x27;childItem&#x27;</span>,&#123;</span><br><span class="line">      data: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">          message:<span class="string">&#x27;子组件内容&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      props:[<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">      template: <span class="string">&#x27;&lt;h2&gt;&#123;&#123;message+&quot;---&quot;+title&#125;&#125;&lt;/h2&gt;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      data:&#123;</span><br><span class="line">        title:<span class="string">&#x27;动态传递父组件到子组件&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li><p><strong>效果</strong>:</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200823/NC!WmwLBzF!0.png" alt="例子效果图"></p></li><li><h4 id="注-2"><a href="#注-2" class="headerlink" title="注:"></a>注:</h4><ol><li><code>props</code>属性命名规则:<ul><li>在<code>props</code>中共使用驼峰形式，模板中需要使用短横线的形式</li><li>字符串形式的模板没有这个限制</li><li>即在HTML中不区分大小写，需要用短横线形式</li></ul></li><li><code>props</code>属性值类型:<ul><li>字符串 String</li><li>数值 Number  （绑定时用动态绑定才能传对应的类型，否则默认为字符串类型）</li><li>布尔值 Boolean  （绑定时用动态绑定才能传对应的类型，否则默认为字符串类型）</li><li>数组 Array</li><li>对象 Object</li></ul></li></ol></li></ul></li><li><p><code>props</code>传递原则是: 单向数据流</p></li></ol></li></ul><hr><ol start="2"><li><h4 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 子组件通过$emit(&quot;事件名称&quot;)自定义事件向父组件传递信息</span><br><span class="line"></span><br><span class="line">&lt;button @click = <span class="string">&#x27;$emit(&quot;add-text&quot;,&#123;可传的参数&#125;)&#x27;</span>&gt;扩大字体&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"># 父组件监听子组件的事件</span><br><span class="line"></span><br><span class="line">&lt;main-item @add-text = <span class="string">&quot;add(&#123;$event有参数的话用这个接收参数&#125;)&quot;</span>&gt;&lt;/main-item&gt;</span><br></pre></td></tr></table></figure><ul><li>例子:</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">      &lt;p :style = <span class="string">&quot;&#123;fontSize: fontSize + &#x27;px&#x27;&#125;&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;</span><br><span class="line">      &lt;child-item @add-font = <span class="string">&quot;add($event)&quot;</span>&gt;&lt;/child-item&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    Vue.component(<span class="string">&#x27;childItem&#x27;</span>,&#123;</span><br><span class="line">      data: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      template: <span class="string">`&lt;button @click = &quot;$emit(&#x27;add-font&#x27;,5)&quot;&gt;子组件按钮---文字增大&lt;/button&gt;`</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      data:&#123;</span><br><span class="line">        fontSize: <span class="number">16</span>,</span><br><span class="line">        message:<span class="string">&#x27;父组件内容&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods:&#123;</span><br><span class="line">        add(e)&#123;</span><br><span class="line">          <span class="built_in">this</span>.fontSize += e</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>效果:</strong></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200823/1!!CcGi^WzxG.png" alt="默认效果"></p><p>​                                                            <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200823/tk^xPGR81AEA.png" alt="点击两次以后效果"></p><ul><li><h4 id="注-3"><a href="#注-3" class="headerlink" title="注:"></a>注:</h4><ol><li>子组件想把数据传递给父组件的话, 那么可以通过事件触发的方式来传递数据, 父组件使用 v-on / @ 自定义事件进行监听即可。</li><li>当传递的事件有参数时，父组件接收事件时用<code>$event</code>，接收参数，如果执行的内容是函数的话可以在HTML中省略<code>$event</code>，在对应的函数接收即可</li></ol></li></ul></li></ol><hr><ol start="3"><li><h4 id="非父组件跟子组件之间的传值（事件总线）："><a href="#非父组件跟子组件之间的传值（事件总线）：" class="headerlink" title="非父组件跟子组件之间的传值（事件总线）："></a>非父组件跟子组件之间的传值（事件总线）：</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200823/Lek1*eC1^RWk.png" alt="非父组件跟子组件之间的传值示意图"></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 单独的事件总线注册</span><br><span class="line"><span class="keyword">var</span> eventBus = <span class="keyword">new</span> Vue()</span><br><span class="line"></span><br><span class="line"># 监听事件与销毁事件</span><br><span class="line">eventBus.$on(<span class="string">&#x27;事件名称&#x27;</span>,<span class="function">(<span class="params">参数</span>) =&gt;</span>&#123;&#125;)</span><br><span class="line">eventBus.$off(<span class="string">&#x27;事件名称&#x27;</span>)</span><br><span class="line"></span><br><span class="line"># 触发事件</span><br><span class="line">eventBus.$emit(<span class="string">&#x27;事件名称&#x27;</span>,参数)</span><br></pre></td></tr></table></figure></li></ol><ul><li><p><strong>例子:</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button @click = <span class="string">&quot;over&quot;</span>&gt;销毁功能&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;tom-add&gt;&lt;/tom-add&gt;</span><br><span class="line">    &lt;jack-add&gt;&lt;/jack-add&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> eventBus = <span class="keyword">new</span> Vue()</span><br><span class="line">  Vue.component(<span class="string">&#x27;tom-add&#x27;</span>,&#123;</span><br><span class="line">    data:<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span>&#123;</span><br><span class="line">        num: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template:<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;Tom的数量:&#123;&#123;num&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;button @click = &quot;add&quot;&gt;增加Jack的数量&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      add()&#123;</span><br><span class="line">        eventBus.$emit(<span class="string">&#x27;add-jack&#x27;</span>,<span class="number">5</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      eventBus.$on(<span class="string">&#x27;add-tom&#x27;</span>,<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num += e</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  Vue.component(<span class="string">&#x27;jack-add&#x27;</span>,&#123;</span><br><span class="line">    data:<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span>&#123;</span><br><span class="line">        num: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template:<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;Jack的数量:&#123;&#123;num&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;button @click = &quot;add&quot;&gt;增加Tom的数量&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      add()&#123;</span><br><span class="line">        eventBus.$emit(<span class="string">&#x27;add-tom&#x27;</span>,<span class="number">10</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      eventBus.$on(<span class="string">&#x27;add-jack&#x27;</span>,<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num += e</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      over()&#123;</span><br><span class="line">        eventBus.$off(<span class="string">&#x27;add-jack&#x27;</span>)</span><br><span class="line">        eventBus.$off(<span class="string">&#x27;add-tom&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>效果:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200823/hdK1gZ9eOO8A.png" alt="默认效果"></p></li></ul><p>​                                                                           <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200823/Rqiv67Jiqyik.png" alt="分别点击一次后的效果"></p><p>​                                                                            <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200823/jEQFS1t0Ceer.png" alt="点击销毁事件按钮事件销毁"></p><ul><li><h4 id="注-4"><a href="#注-4" class="headerlink" title="注:"></a>注:</h4><ol><li><p>一般在项目中结合组件化思想很少这样全局写，而是直接在main.js建一个空的Vue实例，用来做中央事件总线：</p><p><code>//购物车组件信息交互 Vue.prototype.shopbus = new Vue();</code></p></li><li><p>在使用完，要销毁的时候，需要及时销毁，最好在组件销毁前清除事件监听</p></li></ol></li></ul><hr><h2 id="4-组件插槽"><a href="#4-组件插槽" class="headerlink" title="4.组件插槽:"></a>4.组件插槽:</h2><ul><li><h4 id="组件插槽的概念"><a href="#组件插槽的概念" class="headerlink" title="组件插槽的概念"></a>组件插槽的概念</h4><p>Vue组件化中，当我们在设计一个组件的时候，可能会保留一部分，让使用者自定义的内容，比如：</p><ol><li>导航栏组件中，右上角的分享按钮，左上角做菜单按钮</li><li>弹出框组件中，弹出框的提示内容等</li><li>轮播图等等….</li></ol><p>在这种场景下，保留给使用者的部分，叫做插槽(slot)</p></li><li><h4 id="作用"><a href="#作用" class="headerlink" title="作用:"></a>作用:</h4><p>父组件向子组件传递内容。</p></li><li><h4 id="插槽的分类"><a href="#插槽的分类" class="headerlink" title="插槽的分类:"></a>插槽的分类:</h4><ul><li><p><strong>匿名插槽:</strong></p><ol><li>所谓匿名插槽，就是这个插槽<code>&lt;slot&gt;&lt;/slot&gt;</code>没有<code>name</code>属性，使用者放进来的东西，都扔进这个插槽中。</li><li>匿名插槽是一种特殊的具名插槽，也就是没有命名的插槽</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 在子组件中，使用特殊的元素&lt;slot&gt;就可以为子组件开启一个插槽。</span><br><span class="line">Vue.component(<span class="string">&#x27;err-message&#x27;</span>,&#123;</span><br><span class="line">    template:<span class="string">`</span></span><br><span class="line"><span class="string">      &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;span style = &quot;fontWeight: 800&quot;&gt;错误信息为:&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;slot&gt;默认错误&lt;/slot&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">      `</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"># 该插槽插入什么内容取决于父组件如何使用。</span><br><span class="line">&lt;err-message&gt;&lt;/err-message&gt;</span><br><span class="line">&lt;err-message&gt;<span class="number">404</span>&lt;/err-message&gt;</span><br><span class="line">&lt;err-message&gt;<span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>500<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span>&lt;/err-message&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>例子:</strong></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;err-message&gt;&lt;/err-message&gt;</span><br><span class="line">    &lt;err-message&gt;<span class="number">404</span>&lt;/err-message&gt;</span><br><span class="line">    &lt;err-message&gt;<span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>500<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span>&lt;/err-message&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  Vue.component(<span class="string">&#x27;err-message&#x27;</span>,&#123;</span><br><span class="line">    template:<span class="string">`</span></span><br><span class="line"><span class="string">      &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;span style = &quot;fontWeight: 800&quot;&gt;错误信息为:&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;slot&gt;默认错误&lt;/slot&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">      `</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li><p><strong>效果:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200824/^KwmeoaGSqSI.png" alt="效果图"></p></li></ul></li></ul><hr></li></ul><ul><li><p><strong>具名插槽:</strong></p><ol><li>当有多个插槽时，我们只想替换其中一个，就需要用到具名插槽了</li><li>所谓具名插槽，就是这个插槽里，这个插槽被命了名(<code>name</code>属性有值了)，想要向这个具名插槽中插入东西时，声明插槽的名称就行了</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 用name属性给&lt;slot&gt;&lt;/slot&gt;标签命名</span><br><span class="line">Vue.component(<span class="string">&#x27;text-message&#x27;</span>,&#123;</span><br><span class="line">    template:<span class="string">`</span></span><br><span class="line"><span class="string">      &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;header&gt;</span></span><br><span class="line"><span class="string">          &lt;slot name = &quot;header&quot;&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">        &lt;/header&gt;</span></span><br><span class="line"><span class="string">        &lt;main&gt;</span></span><br><span class="line"><span class="string">          &lt;slot name = &quot;main&quot;&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">        &lt;/main&gt;</span></span><br><span class="line"><span class="string">        &lt;footer&gt;</span></span><br><span class="line"><span class="string">          &lt;slot name = &quot;footer&quot;&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">        &lt;/footer&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">      `</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"># 使用template标签声明具名插槽名称&lt;template v-slot:插槽名&gt;&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;text-message&gt;</span><br><span class="line">      &lt;template v-slot:header&gt;</span><br><span class="line">        &lt;h3&gt;这是标题内容&lt;/h3&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;template v-slot:main&gt;</span><br><span class="line">        &lt;h3&gt;这是主要内容&lt;/h3&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;template v-slot:footer&gt;</span><br><span class="line">        &lt;h3&gt;这是结尾内容&lt;/h3&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/text-message&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>例子:</strong></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;text-message&gt;</span><br><span class="line">      &lt;template v-slot:header&gt;</span><br><span class="line">        &lt;h3&gt;这是标题内容&lt;/h3&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;template v-slot:main&gt;</span><br><span class="line">        &lt;h3&gt;这是主要内容&lt;/h3&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;template v-slot:footer&gt;</span><br><span class="line">        &lt;h3&gt;这是结尾内容&lt;/h3&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/text-message&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  Vue.component(<span class="string">&#x27;text-message&#x27;</span>,&#123;</span><br><span class="line">    template:<span class="string">`</span></span><br><span class="line"><span class="string">      &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;header&gt;</span></span><br><span class="line"><span class="string">          &lt;slot name = &quot;header&quot;&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">        &lt;/header&gt;</span></span><br><span class="line"><span class="string">        &lt;main&gt;</span></span><br><span class="line"><span class="string">          &lt;slot name = &quot;main&quot;&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">        &lt;/main&gt;</span></span><br><span class="line"><span class="string">        &lt;footer&gt;</span></span><br><span class="line"><span class="string">          &lt;slot name = &quot;footer&quot;&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">        &lt;/footer&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">      `</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li><p><strong>效果:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200824/3ZclMn69iTx6.png" alt="效果图"></p></li></ul></li></ul><hr><ul><li><h4 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽:"></a>作用域插槽:</h4><ul><li><p><strong>概念:</strong></p><p>​    可以绑定数据的插槽，显示内容完全由子组件决定，数据来自子组件。作用域插槽的样式由父组件决定</p></li><li><p><strong>使用:</strong></p></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 在子组件的&lt;template&gt;模板中动态绑定要暴露给父组件的属性</span><br><span class="line">&lt;template id=<span class="string">&quot;list-message&quot;</span>&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;slot :list = <span class="string">&#x27;list&#x27;</span>&gt;&lt;/slot&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"># 父组件: 我们先来看2.6版本之前的写法</span><br><span class="line">&lt;list-message&gt;</span><br><span class="line">      &lt;template slot-scope = <span class="string">&quot;slotProps&quot;</span>&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li v-<span class="keyword">for</span> = <span class="string">&quot;(item,index) in slotProps.list&quot;</span> :key = <span class="string">&quot;index&quot;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">&lt;/list-message&gt;</span><br><span class="line"></span><br><span class="line"># 父组件: 我们先来看2.6版本之后的写法</span><br><span class="line">&lt;list-message&gt;</span><br><span class="line">      &lt;template v-slot = <span class="string">&quot;slotProps&quot;</span>&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li v-<span class="keyword">for</span> = <span class="string">&quot;(item,index) in slotProps.list&quot;</span> :key = <span class="string">&quot;index&quot;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">&lt;/list-message&gt;</span><br></pre></td></tr></table></figure><ul><li><p><strong>例子:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200824/j*lNO5iD3DDg.png" alt="效果图"></p></li></ul></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> 系列 </category>
          
          <category> 知识点总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系列 </tag>
            
            <tag> Vue </tag>
            
            <tag> 组件化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue知识点总结(一)</title>
      <link href="/2020/08/17/Vue%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E4%B8%80/"/>
      <url>/2020/08/17/Vue%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue知识点总结-一"><a href="#Vue知识点总结-一" class="headerlink" title="Vue知识点总结(一)"></a>Vue知识点总结(一)</h1><blockquote><p>纯属随笔记录，具体详细教程，请查阅<a href="https://vuejs.bootcss.com/guide/">vue.js官网</a></p></blockquote><h2 id="一-Vue实现的MVVM模式"><a href="#一-Vue实现的MVVM模式" class="headerlink" title="一.Vue实现的MVVM模式"></a>一.Vue实现的MVVM模式</h2><p>   <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200817/XgXgUxUmal7I.png" alt="MVVM模式结构"></p><ul><li><strong>MVVM分为三个部分：分别是M（Model，模型层 ），V（View，视图层），VM（ViewModel，V与M连接的桥梁，也可以看作为控制器）</strong></li></ul><ol><li>M：模型层，主要负责业务数据相关；</li><li>V：视图层，顾名思义，负责视图相关，简单来说就是HTML+CSS；</li><li>VM：V与M沟通的桥梁，负责监听M或者V的修改，是实现MVVM双向绑定的关键桥梁；</li></ol><ul><li><strong>MVVM实现双向绑定：即可以通过上面的视图来说，当V或者M层发生数据改变，这时VM层会及时检查到变化然后通知另一层也发生相应改变，这样使模块之间耦合度降低(强调的是UI中不包含业务逻辑的代码，即View和ViewModel解耦)</strong></li></ul><h2 id="二-el：挂载点"><a href="#二-el：挂载点" class="headerlink" title="二. el：挂载点"></a>二. el：挂载点</h2><blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#HTML部分:</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &#123;&#123; message &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">#JavaScript部分:</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        message: <span class="string">&#x27;Hello Vue!&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></blockquote><ul><li><p><strong>效果:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200817/bSpeRB61d3Bt.png" alt="效果图"></p><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点:"></a>注意点:</h4></li></ul><ol><li><h3 id="Vue实例的作用范围是什么呢"><a href="#Vue实例的作用范围是什么呢" class="headerlink" title="Vue实例的作用范围是什么呢?"></a>Vue实例的作用范围是什么呢?</h3><p>​    Vue会管理el选项<strong>命中的元素</strong>以及内部的<strong>后代元素</strong></p></li><li><h3 id="是否可以使用其他选择器"><a href="#是否可以使用其他选择器" class="headerlink" title="是否可以使用其他选择器"></a>是否可以使用其他选择器</h3><p>​    可以使用其他选择器比如: <code>el:&#39;.app&#39;</code>（class类选择器）或者<code>el:&#39;div&#39;</code>（标签）等，但是建议<strong>使用id选择器</strong>，因为id是唯一的。</p></li><li><h3 id="是否可以设置其他的DOM元素的呢"><a href="#是否可以设置其他的DOM元素的呢" class="headerlink" title="是否可以设置其他的DOM元素的呢?"></a>是否可以设置其他的DOM元素的呢?</h3><p>​    可以设置其他的双标签，但是<strong>不能设置<code>&lt;body&gt;</code>和<code>&lt;html&gt;</code>标签</strong></p></li></ol><hr><h2 id="三-data：数据对象"><a href="#三-data：数据对象" class="headerlink" title="三. data：数据对象"></a>三. data：数据对象</h2><blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#HTML部分:</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &#123;&#123; message &#125;&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123;user&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;user.name&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;li&gt;&#123;&#123;hobby[<span class="number">0</span>]&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&#123;&#123;hobby[<span class="number">2</span>]&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">#JavaScript部分:</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      message: <span class="string">&#x27;Hello Vue!&#x27;</span>,</span><br><span class="line">      user:&#123;</span><br><span class="line">        name:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">        age:<span class="number">18</span>,</span><br><span class="line">        sex:<span class="string">&#x27;男&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      hobby:[<span class="string">&#x27;唱歌&#x27;</span>,<span class="string">&#x27;跳舞&#x27;</span>,<span class="string">&#x27;打篮球&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></blockquote><ul><li><p><strong>效果:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200817/9MokX1TewF98.png" alt="效果图"></p><h4 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点:"></a>注意点:</h4></li></ul><ol><li>Vue用到的数据定义在<strong>data</strong>中</li><li>data中可以写入<strong>复杂类型</strong>的数据</li><li>渲染复杂类型数据时，遵循<strong>js语法</strong>即可</li></ol><hr><h2 id="四-Vue指令"><a href="#四-Vue指令" class="headerlink" title="四. Vue指令"></a>四. Vue指令</h2><h3 id="1-v-text"><a href="#1-v-text" class="headerlink" title="1. v-text:"></a>1. v-text:</h3>   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># HTML:</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;h2 v-text = <span class="string">&quot;message&quot;</span>&gt;&lt;/h2&gt;</span><br><span class="line">    &lt;h2 v-text = <span class="string">&quot;user.name+&#x27;!&#x27;&quot;</span>&gt;&lt;/h2&gt;</span><br><span class="line">    &lt;h2 v-text = <span class="string">&quot;user.age&quot;</span>&gt;年龄:&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄:&#123;&#123;user.age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"># JavaScript:</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      message: <span class="string">&#x27;Hello Vue!&#x27;</span>,</span><br><span class="line">      user:&#123;</span><br><span class="line">        name:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">        age:<span class="number">18</span>,</span><br><span class="line">        sex:<span class="string">&#x27;男&#x27;</span></span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p><strong>效果</strong>:</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200818/pQL4EJjXUc^H.png" alt="效果"></p></li><li><h4 id="注意点-2"><a href="#注意点-2" class="headerlink" title="注意点:"></a>注意点:</h4><ol><li><code>v-text</code>指令的作用是:设置标签的内容(textContent)</li><li>默认写法会替换全部内容，使用差值表达式(胡子语法)<code>&#123;&#123;&#125;&#125;`可以替换指定内容     3. 如果想在`v-text`或者`&#123;&#123;&#125;&#125;</code>中拼接其他内容需要用单引号或者双引号取决于外层</li><li>内部支持写表达式</li></ol></li></ul><hr><h3 id="2-v-html"><a href="#2-v-html" class="headerlink" title="2. v-html:"></a>2. v-html:</h3>   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># HTML:</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;p v-html = <span class="string">&quot;message&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p v-text = <span class="string">&quot;message&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"># JavaScript:</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      message: <span class="string">&#x27;&lt;a href = &quot;https://www.bilibili.com/&quot;&gt;哔哩哔哩&lt;/a&gt;&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p><strong>效果</strong>:</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200818/S1K3vo4zy3yw.png" alt="效果"></p></li><li><h4 id="注意点-3"><a href="#注意点-3" class="headerlink" title="注意点:"></a>注意点:</h4><ol><li><code>v-html</code>指令的作用是: 设置元素的<code>innerHTML</code></li><li>内容中有html结构会被解析为标签</li><li><code>v-text</code>指令无论内容是什么，只会解析为文本</li><li>解析文本使用v-text，需要解析html结构使用<code>v-html</code></li></ol></li></ul><hr><p>​    </p><h3 id="3-v-on"><a href="#3-v-on" class="headerlink" title="3.v-on:"></a>3.v-on:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># HTML:</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button v-on:click = <span class="string">&quot;reduce&quot;</span>&gt;-&lt;/button&gt;</span><br><span class="line">    &lt;button @click = <span class="string">&quot;add&quot;</span>&gt;+&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"># JavaScript:</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      message: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      reduce()&#123;</span><br><span class="line">        <span class="built_in">this</span>.message--</span><br><span class="line">      &#125;,</span><br><span class="line">      add()&#123;</span><br><span class="line">        <span class="built_in">this</span>.message++</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p><strong>效果</strong>:</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200818/uwqtaM8uTLuL.png" alt="原始效图"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200818/RH914nSX!0Ur.png" alt="点击+号效果"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200818/stc1s3xZZgGu.png" alt="点击-号的效果"></p></li><li><h4 id="注意点-4"><a href="#注意点-4" class="headerlink" title="注意点:"></a>注意点:</h4><ol><li><code>v-on</code>指令的作用是: 为元素绑定事件</li><li>事件名不需要写on</li><li>指令的语法糖(简写)是<code>@</code></li><li>绑定的方法写作<code>methods</code>属性中</li><li>方法内部通过<code>this</code>关键字可以访问定义在<code>data</code>中的数据</li><li>事件绑定的方法写成函数调用的形式，可以传入自定义参数</li><li>定义方法时需要定义形参接收传入实参</li><li>事件的后面跟上 <code>.修饰符</code>可以对事件进行限制</li><li><code>@keyup.enter</code>可以限制触发的按键为回车</li><li>修饰符有很多，详细参考<a href="https://cn.vuejs.org/v2/api/#v-on">官方文档</a></li></ol></li></ul><hr><h3 id="4-v-show"><a href="#4-v-show" class="headerlink" title="4. v-show:"></a>4. v-show:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># HTML:</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">      &lt;h1 v-show=<span class="string">&quot;shut&quot;</span>&gt;哈哈哈&lt;/h1&gt;</span><br><span class="line">      &lt;button @click=<span class="string">&quot;show&quot;</span>&gt;显示&lt;/button&gt;</span><br><span class="line">      &lt;button @click=<span class="string">&quot;hide&quot;</span>&gt;隐藏&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"># JavaScript:</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        message: <span class="number">1</span>,</span><br><span class="line">        shut: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        show() &#123;</span><br><span class="line">          <span class="built_in">this</span>.shut = <span class="literal">true</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        hide() &#123;</span><br><span class="line">          <span class="built_in">this</span>.shut = <span class="literal">false</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p><strong>效果:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200819/b5oD!bOOZvws.png" alt="默认效果"></p><p>​                                                                         <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200819/1ru28iHaBlch.png" alt="点击隐藏效果"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200819/c2AAsqqpT0P^.png" alt="点击显示后的"></p><ul><li><h4 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h4><ol><li><code>v-show</code>指令的作用是: 根据真假切换元素的显示状态</li><li>原理是修改元素的display，实现显示隐藏</li><li>指令后面的内容，最终都会解析为布尔值</li><li>值为true元素显示，值为false元素隐藏</li><li>数据改变后，对应的元素的显示状态会同步更新</li></ol></li></ul><hr></li></ul><h3 id="5-v-if-v-else"><a href="#5-v-if-v-else" class="headerlink" title="5. v-if,v-else:"></a>5. v-if,v-else:</h3>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># HTML:</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">      &lt;h1 v-<span class="keyword">if</span> = <span class="string">&quot;temperature &gt;= 30&quot;</span>&gt;热死了&lt;/h1&gt;</span><br><span class="line">      &lt;h1 v-<span class="keyword">else</span>&gt;舒服了&lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"># JavaScript:</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        temperature: <span class="number">32</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p><strong>效果:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200819/T1pJbUnRtOBP.png" alt="temperature大于等于30时效果"></p><p>​                                                                             <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200819/nKh7EbMYVu40.png" alt="temperature小于30时效果"> </p></li><li><h4 id="注意点-5"><a href="#注意点-5" class="headerlink" title="注意点:"></a>注意点:</h4><ol><li><code>v-if</code>指令的作用是: 根据表达式的真假切换元素的显示状态</li><li>本质是通过操纵dom元素来切换显示状态</li><li>表达式的值为true，元素存在于dom树中，为false，从dom树中移除</li><li>频繁的切换用<code>v-show</code>，反之使用<code>v-if</code>，前者的切换消耗少</li></ol></li></ul><hr><h3 id="6-v-bind"><a href="#6-v-bind" class="headerlink" title="6. v-bind"></a>6. v-bind</h3>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># HTML</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">      &lt;img v-bind:src=<span class="string">&quot;imgURL&quot;</span> /&gt;</span><br><span class="line">      &lt;img :src=<span class="string">&quot;imgURL&quot;</span> :<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;&#123;active:shutActive&#125;&quot;</span> /&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"># class:</span><br><span class="line"></span><br><span class="line">.active &#123;</span><br><span class="line">        border: <span class="number">2</span>px solid red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># JavaScript:</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        imgURL: <span class="string">&quot;http://qew58kkb2.hn-bkt.clouddn.com/cat.jpg&quot;</span>,</span><br><span class="line">        shutActive: <span class="literal">true</span>,</span><br><span class="line">     &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p><strong>效果:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200819/xkkl963PRi*U.png" alt="效果图"></p></li><li><h4 id="注意点-6"><a href="#注意点-6" class="headerlink" title="注意点:"></a>注意点:</h4><ol><li><code>v-bind</code>指令的作用是: 为元素绑定属性</li><li>完整写法是: v-bind:属性名</li><li>语法糖(简写)的话可以直接省略v-bind，只保留 :属性名</li><li>需要动态的增删class建议使用对象的方式</li></ol></li></ul><hr><h4 id="7-v-for"><a href="#7-v-for" class="headerlink" title="7. v-for:"></a>7. v-for:</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># HTML:</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">      &lt;ul v-<span class="keyword">for</span> = <span class="string">&quot;(item,index) in hobby&quot;</span>&gt;</span><br><span class="line">        &lt;li&gt;&#123;&#123;index+<span class="number">1</span>&#125;&#125;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">      &lt;ul v-<span class="keyword">for</span> = <span class="string">&quot;item in user&quot;</span>&gt;</span><br><span class="line">        &lt;li&gt;&#123;&#123;item.name&#125;&#125;&lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"># JavaScript:</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        hobby:[<span class="string">&#x27;唱歌&#x27;</span>,<span class="string">&#x27;跳舞&#x27;</span>,<span class="string">&#x27;打篮球&#x27;</span>,<span class="string">&#x27;打游戏&#x27;</span>,<span class="string">&#x27;看电视&#x27;</span>,<span class="string">&#x27;敲代码&#x27;</span>],</span><br><span class="line">        user:[</span><br><span class="line">          &#123;<span class="attr">name</span>:<span class="string">&#x27;法外狂徒张三&#x27;</span>&#125;,</span><br><span class="line">          &#123;<span class="attr">name</span>:<span class="string">&#x27;魔法少女赵四&#x27;</span>&#125;,</span><br><span class="line">          &#123;<span class="attr">name</span>:<span class="string">&#x27;铁血战士王五&#x27;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">     &#125;,</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ul><li><p><strong>效果:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200819/z4!e7CE4ZhzH.png" alt="效果图"></p></li><li><h4 id="注意点-7"><a href="#注意点-7" class="headerlink" title="注意点:"></a>注意点:</h4><ol><li><code>v-for</code>指令的作用是: 根据数据生成列表结构</li><li>数组经常和v-for结合使用</li><li>语法是<code>(item,index) in 数据</code></li><li>item 和 index 可以结合其他指令一起使用</li><li>数组长度的更新会同步到页面上，是响应式的</li><li>一定要配合<code>key</code>属性使用,属性值是唯一的就行，可以简单的这样理解：需要使用key来给每个节点做一个唯一标识，找到正确的位置区插入新的节点。<strong>key的作用主要是为了高效的更新虚拟DOM</strong></li></ol></li></ul><hr><h4 id="8-v-model"><a href="#8-v-model" class="headerlink" title="8. v-model:"></a>8. v-model:</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># HTML:</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;text&quot;</span> v-model = <span class="string">&quot;message&quot;</span>&gt;</span><br><span class="line">      &lt;button @click = <span class="string">&quot;addText&quot;</span>&gt;补全&lt;/button&gt;</span><br><span class="line">      &lt;h1&gt;&#123;&#123;message&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"># JavaScript:</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        message: <span class="string">&quot;学IT&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods:&#123;</span><br><span class="line">        addText()&#123;</span><br><span class="line">          <span class="built_in">this</span>.message = <span class="built_in">this</span>.message+<span class="string">&#x27;,来黑马程序&#x27;</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p><strong>效果:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200819/JXtCS^7LBkGS.png" alt="原效果"></p><p>​                                                        <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200819/jkI5P@zQRzI9.png" alt="文本框里打字后的效果"> </p><p>​                                                        <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200819/YDMc8m!rtLvc.png" alt="点击补全之后的效果"></p></li><li><h4 id="注意点-8"><a href="#注意点-8" class="headerlink" title="注意点:"></a>注意点:</h4><ol><li><code>v-model</code>指令的作用是便捷的设置和获取表单元素的值</li><li>绑定的数据会和表单元素值相关联</li><li>绑定的数据&lt;——&gt;表单元素的值</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> 知识点总结(一) </category>
          
          <category> 系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系列 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5新特性(三.视频和音频)</title>
      <link href="/2020/08/16/HTML5%E6%96%B0%E7%89%B9%E6%80%A7-%E4%B8%89-%E8%A7%86%E9%A2%91%E5%92%8C%E9%9F%B3%E9%A2%91/"/>
      <url>/2020/08/16/HTML5%E6%96%B0%E7%89%B9%E6%80%A7-%E4%B8%89-%E8%A7%86%E9%A2%91%E5%92%8C%E9%9F%B3%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML5-新增的音频和视频"><a href="#HTML5-新增的音频和视频" class="headerlink" title="HTML5 新增的音频和视频"></a>HTML5 新增的音频和视频</h1><ul><li><h3 id="来历"><a href="#来历" class="headerlink" title="来历:"></a>来历:</h3></li></ul><p>HTML5未出来之前，在线的音频和视频都是借助Flash或者第三方工具实现的，现在HTML5也支持了这方面的功能。在一个支持HTML5的浏览器中，不需要安装任何插件就能播放音频和视频。原生的支持音频和视频，为HTML5注入了巨大的发展潜力。</p><hr><ol><li><h2 id="视频标签-lt-video-gt"><a href="#视频标签-lt-video-gt" class="headerlink" title="视频标签&lt;video&gt;"></a>视频标签&lt;video&gt;</h2><ul><li><h3 id="lt-video-gt-视频支持的格式"><a href="#lt-video-gt-视频支持的格式" class="headerlink" title="&lt;video&gt;视频支持的格式:"></a>&lt;video&gt;视频支持的格式:</h3></li></ul><p>浏览器并不是都支持相同的<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Supported_media_formats">视频格式</a>，所以你可以在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/source"><code>source</code></a> 元素里提供多个视频源，然后浏览器将会使用它所支持的第一个源。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200816/Pf!jWvczUtaM.png" alt="video视频支持的格式"></p><p><strong>注</strong>:</p><p>Ogg = 带有Theora视频编码和Vorbis音频编码的 Ogg 文件<br>MPEG4 = 带有H.264视频编码和ACC音频编码的 MPEG 4 文件<br>WebM = 带有VP8视频编码和Vorbis音频编码的 WebM 文件</p><ul><li><h2 id="常用的-lt-video-gt-标签的属性"><a href="#常用的-lt-video-gt-标签的属性" class="headerlink" title="常用的&lt;video&gt;标签的属性:"></a>常用的&lt;video&gt;标签的属性:</h2></li></ul><table><thead><tr><th align="center">属性</th><th align="center">可选值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">autoplay</td><td align="center">autoplay</td><td align="center">视频就会开始自动播放，而且无需停止加载任何数据。</td></tr><tr><td align="center">controls</td><td align="center">controls</td><td align="center">向用户显示控件，包括音量，跨帧，暂停/恢复播放。</td></tr><tr><td align="center">height</td><td align="center">pixels(px)</td><td align="center">视频展示区域的高度，单位是CSS像素。</td></tr><tr><td align="center">width</td><td align="center">pixels(px)</td><td align="center">视频显示区域的宽度，单位是CSS像素。</td></tr><tr><td align="center">loop</td><td align="center">loop</td><td align="center">指定后，会在视频结尾的地方，自动返回视频开始的地方。</td></tr><tr><td align="center">muted</td><td align="center">muted</td><td align="center">指明了视频里的音频的默认设置。设置后，音频会初始化为静音。默认值是false,意味着视频播放的时候音频也会播放 。</td></tr><tr><td align="center">poster</td><td align="center">url</td><td align="center">一个海报帧的URL，用于在用户播放或者跳帧之前展示。如果属性未指定，那么在第一帧可用之前什么都不会展示；之后第一帧就像海报帧一样展示。</td></tr><tr><td align="center">preload</td><td align="center">auto/metadata/none</td><td align="center">下面会具体说明</td></tr><tr><td align="center">src</td><td align="center">url</td><td align="center">要播放的视频的URL</td></tr></tbody></table></li></ol><pre><code>                #### `preload`属性的说明:</code></pre><ul><li><p><code>none</code>: 提示作者认为用户不需要查看该视频，服务器也想要最小化访问流量；换句话说就是提示浏览器该视频不需要缓存。</p></li><li><p><code>metadata</code>: 提示尽管作者认为用户不需要查看该视频，不过抓取元数据（比如：长度）还是很合理的。</p></li><li><p><code>auto</code>: 用户需要这个视频优先加载；换句话说就是提示：如果需要的话，可以下载整个视频，即使用户并不一定会用它。</p></li><li><p><em>空字符串</em>：也就代指 auto 值。</p></li><li><p>假如不设置，默认值就是浏览器定义的了 （即，不同浏览器会选择自己的默认值）</p></li><li><p><code>autoplay</code> 属性优先于 <code>preload</code> 假如用户想自动播放视频，那么很明显浏览器需要下载视频。但是同时设置<code>autoplay</code> 和 <code>preload</code>属性在规范里是允许的。</p></li></ul><p>​    </p><pre><code>    ### 示例:</code></pre><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;video&gt; 标签可以将视频内容嵌入到HTML文档中:</span></span><br><span class="line"><span class="comment">&lt;source&gt;标签可以定义多种媒体资源，对应不同浏览器支持的视频格式</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">&quot;320&quot;</span> <span class="attr">height</span>=<span class="string">&quot;240&quot;</span> <span class="attr">controls</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;movie.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;movie.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/ogg&quot;</span>&gt;</span> </span><br><span class="line">您的浏览器不支持 video 标签。 </span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line">提示：可以在 <span class="tag">&lt;<span class="name">video</span>&gt;</span> 和 <span class="tag">&lt;/<span class="name">video</span>&gt;</span> 标签之间放置文本内容，这样不支持 <span class="tag">&lt;<span class="name">video</span>&gt;</span> 元素的浏览器就可以显示出该标签的信息。</span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果:"></a>效果:</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200816/IYEFGXJ59TDt.png" alt="Chome浏览器中的效果"></p><hr><ol start="2"><li><h2 id="音频标签-lt-audio-gt"><a href="#音频标签-lt-audio-gt" class="headerlink" title="音频标签&lt;audio&gt;"></a>音频标签&lt;audio&gt;</h2><ul><li><h3 id="lt-audio-gt-支持的格式"><a href="#lt-audio-gt-支持的格式" class="headerlink" title="&lt;audio&gt;支持的格式:"></a>&lt;audio&gt;支持的格式:</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200816/lIE@YxtGieTJ.png" alt="&lt;audio&gt;支持的格式:"></p></li><li><h2 id="常用的-lt-video-gt-标签的属性-1"><a href="#常用的-lt-video-gt-标签的属性-1" class="headerlink" title="常用的&lt;video&gt;标签的属性:"></a>常用的&lt;video&gt;标签的属性:</h2></li></ul><table><thead><tr><th align="center">属性</th><th align="center">可选值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">autoplay</td><td align="center">autoplay</td><td align="center">声明该属性，音频会尽快自动播放，不会等待整个音频文件下载完成。</td></tr><tr><td align="center">controls</td><td align="center">controls</td><td align="center">如果声明了该属性，浏览器将提供一个包含声音，播放进度，播放暂停的控制面板，让用户可以控制音频的播放。</td></tr><tr><td align="center">loop</td><td align="center">loop</td><td align="center">如果声明该属性，将循环播放音频。</td></tr><tr><td align="center">muted</td><td align="center">muted</td><td align="center">视频的音频输出为静音</td></tr><tr><td align="center">preload</td><td align="center">auto/metadata/none</td><td align="center">同上<code>&lt;video&gt;</code>一样</td></tr><tr><td align="center">src</td><td align="center">url</td><td align="center">嵌入的音频的URL。</td></tr></tbody></table></li></ol><h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3>   <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;horse.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg&quot;</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;horse.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span>&gt;</span> </span><br><span class="line">  您的浏览器不支持 audio 元素</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">可以在 &lt;audio&gt; 和 &lt;/audio&gt; 之间放置文本内容，</span></span><br><span class="line"><span class="comment">这些文本信息将会被显示在那些不支持 &lt;audio&gt; 标签的浏览器中。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果:"></a>效果:</h3><p>   ​        <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200816/FY^HMxWIauhN.png" alt="Chome浏览器中的效果"></p>]]></content>
      
      
      <categories>
          
          <category> HTML5 </category>
          
          <category> 视频和音频 </category>
          
          <category> 系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> 系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5新特性(二.增强型表单)</title>
      <link href="/2020/08/15/HTML5%E6%96%B0%E7%89%B9%E6%80%A7-%E4%BA%8C-%E5%A2%9E%E5%BC%BA%E5%9E%8B%E8%A1%A8%E5%8D%95/"/>
      <url>/2020/08/15/HTML5%E6%96%B0%E7%89%B9%E6%80%A7-%E4%BA%8C-%E5%A2%9E%E5%BC%BA%E5%9E%8B%E8%A1%A8%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML5新特性，增强型表单"><a href="#HTML5新特性，增强型表单" class="headerlink" title="HTML5新特性，增强型表单"></a>HTML5新特性，增强型表单</h1><ul><li><h2 id="表单元素-lt-input-type-”-”-gt-的值："><a href="#表单元素-lt-input-type-”-”-gt-的值：" class="headerlink" title="表单元素&lt;input type=”?”&gt;的值："></a>表单元素&lt;input type=”?”&gt;的值：</h2><ol><li><h4 id="在HTML4中原有的type值"><a href="#在HTML4中原有的type值" class="headerlink" title="在HTML4中原有的type值:"></a>在HTML4中原有的type值:</h4></li></ol><p><code>text</code>, <code>password</code>, <code>checkbox</code>,<code>radio</code>, <code>submit</code>,<code> reset</code>,<code> button</code>,<code> file</code>, <code>image</code>, <code>hidden</code>,<code>emai</code>,<code>number</code>;</p><ol start="2"><li><h4 id="HTML5中新增的type值："><a href="#HTML5中新增的type值：" class="headerlink" title="HTML5中新增的type值："></a>HTML5中新增的type值：</h4></li></ol><p><code>url</code>, <code>tel</code>, <code>search</code>,<code> range</code>, <code>color</code>, <code>date</code>, <code>month</code>,<code> week</code>,<code>datetime-local</code>,<code>time</code>;</p><h3 id="下面是HTML5新增值的例子"><a href="#下面是HTML5新增值的例子" class="headerlink" title="下面是HTML5新增值的例子:"></a>下面是HTML5新增值的例子:</h3></li></ul><ol><li><h4 id="type-“url”"><a href="#type-“url”" class="headerlink" title="type = “url”:"></a>type = “url”:</h4><blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;url&quot;</span> <span class="attr">name</span> = <span class="string">&quot;url&quot;</span> <span class="attr">placeholder</span> = <span class="string">&quot;请输入网址&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><ul><li><p><strong>解释</strong>：</p><p>用于输入 url 的控件。类似 <code>text</code> 输入，但有验证参数，在支持动态键盘的设备上有相应的键盘。</p></li><li><p><strong>效果</strong>：</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/Snipaste_2020-08-15_17-59-02.png" alt="type = &quot;url&quot;的效果图"></p></li></ol><hr><ol start="2"><li><h4 id="type-“tel”"><a href="#type-“tel”" class="headerlink" title="type = “tel”"></a>type = “tel”</h4></li></ol><blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;tel&quot;</span> <span class="attr">name</span> = <span class="string">&quot;phone&quot;</span> <span class="attr">placeholder</span> = <span class="string">&quot;输入电话号码&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><ul><li><strong>解释:</strong></li></ul><p>用于输入电话号码的控件。拥有动态键盘的设备上会显示电话数字键盘。</p><ul><li><p><strong>效果:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200815181705.png" alt="type = &quot;tel&quot;的效果图"></p></li></ul><hr><ol start="3"><li><h4 id="type-“search”"><a href="#type-“search”" class="headerlink" title="type = “search”"></a>type = “search”</h4><blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;search&quot;</span> <span class="attr">name</span> = <span class="string">&quot;search&quot;</span> <span class="attr">placeholder</span> = <span class="string">&quot;请输入搜索内容&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><ul><li><strong>解释</strong>:</li></ul><p>用于搜索字符串的单行文字区域。输入文本中的换行会被自动去除。在支持的浏览器中可能有一个删除按钮，用于清除整个区域。拥有动态键盘的设备上的回车图标会变成搜索图标。</p><ul><li><p><strong>效果</strong>:</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200815200435.png" alt="type = &quot;search&quot;的效果图"></p></li></ul><hr></li></ol><ol start="4"><li><h4 id="type-“range”"><a href="#type-“range”" class="headerlink" title="type = “range”"></a>type = “range”</h4><blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">max</span>=<span class="string">&quot;50&quot;</span> <span class="attr">step</span>=<span class="string">&quot;5&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rangedemo&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><ul><li><strong>解释:</strong></li></ul><p>此控件用于输入不需要精确的数字。控件是一个范围组件，默认值为正中间的值。同时使用min和 max来规定值的范围。</p><ul><li><p><strong>效果:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200815201238.png" alt="type = &quot;range&quot;的效果图"></p></li></ul></li></ol><hr><ol start="5"><li><h4 id="type-“color”"><a href="#type-“color”" class="headerlink" title="type = “color”"></a>type = “color”</h4><blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span> <span class="attr">name</span>=<span class="string">&quot;colordemo&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><ul><li><strong>解释:</strong></li></ul><p>用于指定颜色的控件；在支持的浏览器中，激活时会打开取色器。</p><ul><li><p><strong>效果</strong>:</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200815201907.png" alt="type = &quot;color&quot;的效果图"></p></li></ul></li></ol><hr><ol start="6"><li><h4 id="type-“date”"><a href="#type-“date”" class="headerlink" title="type = “date”"></a>type = “date”</h4><blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;datedemo&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><ul><li><strong>解释:</strong></li></ul><p>输入日期的控件（年、月、日，不包括时间）。在支持的浏览器激活时打开日期选择器或年月日的数字滚轮。</p><ul><li><p><strong>效果:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200815202343.png" alt="type = &quot;date&quot;的效果图"></p></li></ul></li></ol><hr><ol start="7"><li><h4 id="type-“month”"><a href="#type-“month”" class="headerlink" title="type = “month”"></a>type = “month”</h4><blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;month&quot;</span> <span class="attr">name</span>=<span class="string">&quot;month&quot;</span> <span class="attr">min</span>=<span class="string">&quot;2002-03&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2020-08&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><ul><li><strong>解释:</strong></li></ul><p>输入年和月的控件，没有时区。</p><ul><li><p><strong>效果</strong>:</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200815202808.png" alt="type = &quot;month&quot;的效果图"></p></li></ul></li></ol><hr><ol start="8"><li><h4 id="type-“week”"><a href="#type-“week”" class="headerlink" title="type = “week”"></a>type = “week”</h4><blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;week&quot;</span> <span class="attr">name</span>=<span class="string">&quot;week&quot;</span> <span class="attr">min</span>=<span class="string">&quot;2018-W18&quot;</span> <span class="attr">max</span>=<span class="string">&quot;2020-W26&quot;</span> <span class="attr">required</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><ul><li><strong>解释:</strong></li></ul><p>用于输入以年和周数组成的日期，不带时区。</p><ul><li><p><strong>效果:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200815203129.png" alt="type = &quot;week&quot;的效果图"></p></li></ul></li></ol><hr><ol start="9"><li><h4 id="type-“datetime-local”"><a href="#type-“datetime-local”" class="headerlink" title="type = “datetime-local”"></a>type = “datetime-local”</h4><blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;datetime-local&quot;</span> <span class="attr">name</span>=<span class="string">&quot;meeting-time&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2020-08-15T19:30&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">min</span>=<span class="string">&quot;2002-03-22T00:00&quot;</span> <span class="attr">max</span>=<span class="string">&quot;2020-08-15T00:00&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><ul><li><strong>解释:</strong></li></ul><p>输入日期和时间的控件，不包括时区。在支持的浏览器激活时打开日期选择器或年月日的数字滚轮。</p><ul><li><p><strong>效果:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200815203641.png" alt="type = &quot;datetime-local&quot;的效果图"></p></li></ul></li></ol><hr><ol start="10"><li><h4 id="type-“time”"><a href="#type-“time”" class="headerlink" title="type = “time”"></a>type = “time”</h4><blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;time&quot;</span> <span class="attr">name</span>=<span class="string">&quot;time&quot;</span> <span class="attr">min</span>=<span class="string">&quot;00:00&quot;</span> <span class="attr">max</span>=<span class="string">&quot;24:00&quot;</span> <span class="attr">required</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><ul><li><strong>解释:</strong></li></ul><p>用于输入时间的控件，不包括时区。</p><ul><li><p><strong>效果:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200815204525.png" alt="type = &quot;time&quot;的效果图"></p></li></ul></li></ol><hr><ul><li><h2 id="表单元素的新增属性"><a href="#表单元素的新增属性" class="headerlink" title="表单元素的新增属性:"></a>表单元素的新增属性:</h2><table><thead><tr><th align="center">属性:</th><th align="center">描述:</th><th align="center">例子:</th></tr></thead><tbody><tr><td align="center">placeholder</td><td align="center">占位字符</td><td align="center">&lt;input type=”tel” placeholder=”请输入电话”&gt;</td></tr><tr><td align="center">autofocus</td><td align="center">自动获取输入框焦点</td><td align="center">&lt;input type=”text” autofocus&gt;</td></tr><tr><td align="center">multiple</td><td align="center">一个input是可以有多个值</td><td align="center">&lt;input type=”email” multiple&gt;</td></tr><tr><td align="center">form</td><td align="center">用于把输入框放置到form外部，使得input和form分离</td><td align="center">&lt;form id=”temp”&gt;&lt;/form&gt;      &lt;input \type=”text” form=”temp” &gt;</td></tr><tr><td align="center">required</td><td align="center">必填项，内容不能为空</td><td align="center">&lt;input type = “text” required&gt;</td></tr><tr><td align="center">minlength</td><td align="center">指定字符串最小长度</td><td align="center">&lt;input type=”text” minlength=”4” maxlength=”16”&gt;</td></tr><tr><td align="center">maxlength</td><td align="center">指定字符串最大长度</td><td align="center">&lt;input type=”text” minlength=”4” maxlength=”16”&gt;</td></tr><tr><td align="center">max</td><td align="center">指定数字的最大值</td><td align="center">&lt;input type=”text” min=”0” max=”100”&gt;</td></tr><tr><td align="center">min</td><td align="center">指定数字的最小值</td><td align="center">&lt;input type=”text” min=”0” max=”100”&gt;</td></tr><tr><td align="center">pattern</td><td align="center">添加正则表达式</td><td align="center">&lt;input type=”tel” pattern=”1[3578]\d{9}”/&gt;</td></tr></tbody></table></li></ul><hr><ul><li><h2 id="新增表单元素"><a href="#新增表单元素" class="headerlink" title="新增表单元素:"></a>新增表单元素:</h2><ol><li><h4 id="HTML4中的表单元素"><a href="#HTML4中的表单元素" class="headerlink" title="HTML4中的表单元素:"></a>HTML4中的表单元素:</h4><p><code>input</code>,<code> button</code>,<code> select/option</code>, <code>textarea</code>, <code>label</code></p></li><li><h4 id="HTML5中新增表单元素"><a href="#HTML5中新增表单元素" class="headerlink" title="HTML5中新增表单元素:"></a>HTML5中新增表单元素:</h4><p><code>datalist</code>, <code>progress</code>, <code>meter</code>, <code>output</code></p></li></ol><h3 id="HTML5中新增表单元素例子"><a href="#HTML5中新增表单元素例子" class="headerlink" title="HTML5中新增表单元素例子:"></a>HTML5中新增表单元素例子:</h3><ol><li><h4 id="lt-datalist-gt"><a href="#lt-datalist-gt" class="headerlink" title="&lt;datalist&gt;"></a>&lt;datalist&gt;</h4><blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">list</span>=<span class="string">&quot;job&quot;</span> <span class="attr">name</span>=<span class="string">&quot;myJob&quot;</span> <span class="attr">placeholder</span> = <span class="string">&quot;请输入或选择您的工作&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;job&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;腾讯&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;阿里&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;头条&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;微信&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;字节跳动&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><ul><li><strong>解释:</strong></li></ul><p>datalist 为input提供输入列表，用户可以从中选取，也可以输入,datalist”中定义的Id值名称要与“input”表单中“list”定义的值相同。</p><ul><li><p><strong>效果:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200815212641.png" alt="&lt;datalist&gt;标签效果"></p></li></ul></li></ol><hr><ol start="2"><li><h4 id="lt-progress-gt"><a href="#lt-progress-gt" class="headerlink" title="&lt;progress&gt;"></a>&lt;progress&gt;</h4><blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">value</span>=<span class="string">&quot;50&quot;</span>&gt;</span> 进度50% <span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><ul><li><strong>解释</strong>:</li></ul><p>用来显示一项任务的完成进度.虽然规范中没有规定该元素具体如何显示,浏览器开发商可以自己决定,但通常情况下,该元素都显示为一个进度条形式.</p><ul><li><p><strong>效果:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200815213140.png" alt="&lt;progress&gt;标签效果"></p></li></ul></li></ol><hr><ol start="3"><li><h4 id="lt-meter-gt"><a href="#lt-meter-gt" class="headerlink" title="&lt;meter&gt;"></a>&lt;meter&gt;</h4><blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1.<span class="tag">&lt;<span class="name">meter</span> <span class="attr">min</span>=<span class="string">&quot;200&quot;</span> <span class="attr">max</span>=<span class="string">&quot;500&quot;</span> <span class="attr">value</span>=<span class="string">&quot;250&quot;</span>&gt;</span>350<span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br><span class="line">2.<span class="tag">&lt;<span class="name">meter</span> <span class="attr">low</span>=<span class="string">&quot;69&quot;</span> <span class="attr">high</span>=<span class="string">&quot;80&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">value</span>=<span class="string">&quot;84&quot;</span>&gt;</span>84高于high为红色<span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br><span class="line">3.<span class="tag">&lt;<span class="name">meter</span> <span class="attr">low</span>=<span class="string">&quot;69&quot;</span> <span class="attr">high</span>=<span class="string">&quot;80&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">value</span>=<span class="string">&quot;70&quot;</span>&gt;</span>70介于low~high之间为黄色<span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br><span class="line">4.<span class="tag">&lt;<span class="name">meter</span> <span class="attr">low</span>=<span class="string">&quot;69&quot;</span> <span class="attr">high</span>=<span class="string">&quot;80&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">value</span>=<span class="string">&quot;60&quot;</span>&gt;</span>60低于low为绿色<span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><ul><li><strong>解释</strong>:</li></ul><p><code>&lt;meter&gt;</code>元素用来显示已知范围的标量值或者分数值。用于识别一个值所处的范围，高于high（红色），处于low~high（黄色），低于low（绿色），大体上就是表示随着进度条的不同进度，其颜色也会不同，可以改变其宽、高属性。(min不写默认为0)</p><ul><li><p><strong>效果:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200816100030.png" alt="1,2,3，4效果图"></p></li></ul></li></ol><hr><ol start="4"><li><h4 id="lt-output-gt"><a href="#lt-output-gt" class="headerlink" title="&lt;output&gt;"></a>&lt;output&gt;</h4><blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">oninput</span>=<span class="string">&quot;result.value=parseInt(a.value)+parseInt(b.value)&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">name</span>=<span class="string">&quot;b&quot;</span> <span class="attr">value</span>=<span class="string">&quot;50&quot;</span>&gt;</span> +</span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;a&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>&gt;</span> =</span><br><span class="line">     <span class="tag">&lt;<span class="name">output</span> <span class="attr">name</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><ul><li><strong>解释:</strong></li></ul><p><strong><code>&lt;output&gt;</code> 标签</strong>表示计算或用户操作的结果。语义标签,没有任何外观样式。</p><ul><li><p><strong>效果:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200816095831.png" alt="效果图"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/he_chaoming/blog_tuchuang/raw/master/20200816095944.png" alt="效果图"></p></li></ul></li></ol></li></ul><a class="btn-beautify button--animated blue right larger" href="https://developer.mozilla.org/zh-CN/"   title="参考的MDN Web docs"><i class="far fa-hand-point-right fa-fw"></i><span>参考的MDN Web docs</span></a>]]></content>
      
      
      <categories>
          
          <category> HTML5 </category>
          
          <category> 增强型表单 </category>
          
          <category> 系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> 系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5新特性(一.语义化标签)</title>
      <link href="/2020/08/14/HTML5%E6%96%B0%E7%89%B9%E6%80%A7-%E4%B8%80-%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE/"/>
      <url>/2020/08/14/HTML5%E6%96%B0%E7%89%B9%E6%80%A7-%E4%B8%80-%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML5是什么？"><a href="#HTML5是什么？" class="headerlink" title="HTML5是什么？"></a>HTML5是什么？</h1><p>html5是万维网的核心语言、标准通用标记语言下的一个应用超文本标记语言（HTML）的第五次重大修改。本次修改后的标准我们就称之为html5。</p><h1 id="HTML5有什么好处？"><a href="#HTML5有什么好处？" class="headerlink" title="HTML5有什么好处？"></a>HTML5有什么好处？</h1><p>HTML5主要是提供您想要的网站效果，而无需其他软件，如浏览器插件。它可以完成从动画到应用程序，从音乐到电影的各种操作，还可以用于构建在浏览器中运行的极其复杂的应用程序。</p><h1 id="HTML5缺点"><a href="#HTML5缺点" class="headerlink" title="HTML5缺点"></a>HTML5缺点</h1><p>html5多了十个新特性，但其不支持ie8及ie8以下版本的浏览器(兼容问题)，但是经过时间的洗涤，技术的更新，这些兼容问题会慢慢的解决的。</p><h1 id="HTML5十大新特性"><a href="#HTML5十大新特性" class="headerlink" title="HTML5十大新特性:"></a>HTML5十大新特性:</h1><ol><li><h3 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h3></li><li><h3 id="增强型表单"><a href="#增强型表单" class="headerlink" title="增强型表单"></a>增强型表单</h3></li><li><h3 id="视频和音频"><a href="#视频和音频" class="headerlink" title="视频和音频"></a>视频和音频</h3></li><li><h3 id="Canvas绘图"><a href="#Canvas绘图" class="headerlink" title="Canvas绘图"></a>Canvas绘图</h3></li><li><h3 id="SVG绘图"><a href="#SVG绘图" class="headerlink" title="SVG绘图"></a>SVG绘图</h3></li><li><h3 id="地理定位"><a href="#地理定位" class="headerlink" title="地理定位"></a>地理定位</h3></li><li><h3 id="拖放API"><a href="#拖放API" class="headerlink" title="拖放API"></a>拖放API</h3></li><li><h3 id="Web-Worker"><a href="#Web-Worker" class="headerlink" title="Web Worker"></a>Web Worker</h3></li><li><h3 id="Web-Storage"><a href="#Web-Storage" class="headerlink" title="Web Storage"></a>Web Storage</h3></li><li><h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3></li></ol><h1 id="一-语义化标签"><a href="#一-语义化标签" class="headerlink" title="一.语义化标签"></a>一.语义化标签</h1><ul><li><h3 id="概念"><a href="#概念" class="headerlink" title="概念:"></a>概念:</h3><p>语义化的标签，旨在让标签有自己的含义。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是文章标题<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>我是文章标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="注-这里两个标签都可以作为文章标题内容的容器，单看标签的话不知道这段内容是什么意思，所以语义化就是为了优化这个问题。"><a href="#注-这里两个标签都可以作为文章标题内容的容器，单看标签的话不知道这段内容是什么意思，所以语义化就是为了优化这个问题。" class="headerlink" title="注: 这里两个标签都可以作为文章标题内容的容器，单看标签的话不知道这段内容是什么意思，所以语义化就是为了优化这个问题。"></a>注: 这里两个标签都可以作为文章标题内容的容器，单看标签的话不知道这段内容是什么意思，所以语义化就是为了优化这个问题。</h4></li></ul><ul><li><h3 id="常见的语义化标签"><a href="#常见的语义化标签" class="headerlink" title="常见的语义化标签:"></a>常见的语义化标签:</h3></li></ul><table><thead><tr><th align="center">标签:</th><th align="center">描述:</th></tr></thead><tbody><tr><td align="center">&lt;header&gt;</td><td align="center">定义网页或文档的头部区域，通常包括网站标志、主导航、全站链接以及搜索框。</td></tr><tr><td align="center">&lt;title&gt;</td><td align="center">页面主体内容，身体区域</td></tr><tr><td align="center">&lt;footer&gt;</td><td align="center">定义 section 或 document 的页脚。在多数情况下，该元素会包含作者的姓名、文档的创作日期或联系信息。注: 只有当父级是body时，才是整个页面的页脚。</td></tr><tr><td align="center">&lt;hn&gt;</td><td align="center">h1~h6，分级标题，<code>&lt;h1&gt;</code> 与 <code>&lt;title&gt;</code> 协调有利于搜索引擎优化。</td></tr><tr><td align="center">&lt;nav&gt;</td><td align="center">标记导航，为了方便搜索引擎解析，最好是将主要的链接放在nav中。可以在<header>标签中使用</td></tr><tr><td align="center">&lt;section&gt;</td><td align="center">定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分。</td></tr><tr><td align="center">&lt;article&gt;</td><td align="center">应该使用在相对比较独立、完整的的内容区块，所以我们可以在一篇博客、一个论坛帖子、一篇新闻报道或者一个用户评论中使用<article>元素。article可以互相嵌套。</td></tr><tr><td align="center">&lt;aside&gt;</td><td align="center">所包含的内容不是页面的主要内容、具有独立性，是对页面的补充。<aside>一般使用在页面、文章的侧边栏、广告、友情链接等区域。</td></tr><tr><td align="center">&lt;main&gt;</td><td align="center">页面主要内容，一个页面只能使用一次。如果是web应用，则包围其主要功能。</td></tr><tr><td align="center">&lt;details&gt;</td><td align="center">定义用户可以看到或者隐藏的额外细节</td></tr><tr><td align="center">&lt;dialog&gt;</td><td align="center">定义对话框</td></tr><tr><td align="center">&lt;figure&gt;</td><td align="center">规定独立的流内容（图像、图表、照片、代码等等）（默认有40px左右和16px上下margin）。</td></tr><tr><td align="center">&lt;figcaption&gt;</td><td align="center">定义 <code>figure</code> 元素的标题，应该被置于 <code>figure</code> 元素的第一个或最后一个子元素的位置。</td></tr><tr><td align="center">&lt;mark&gt;</td><td align="center">使用黄色突出显示部分文本。</td></tr><tr><td align="center">&lt;small&gt;</td><td align="center">呈现小号字体效果，指定细则，输入免责声明、注解、署名、版权。</td></tr><tr><td align="center">&lt;strong&gt;</td><td align="center">和 <code>em</code> 标签一样，用于强调文本，但它强调的程度更强一些。</td></tr><tr><td align="center">&lt;em&gt;</td><td align="center">将其中的文本表示为强调的内容，表现为斜体。</td></tr><tr><td align="center">&lt;cite&gt;</td><td align="center">表示所包含的文本对某个参考文献的引用，比如书籍或者杂志的标题。且必须包含作品的标题。注: 通常，浏览器默认使用斜体来展示<code>&lt;cite&gt;</code>元素中的内容</td></tr><tr><td align="center">&lt;blockquoto&gt;</td><td align="center">定义块引用，块引用拥有它们自己的空间。</td></tr><tr><td align="center">&lt;time&gt;</td><td align="center">用来表示24小时制时间或者<a href="http://en.wikipedia.org/wiki/Gregorian_calendar">公历日期</a>，若表示日期则也可包含时间和时区。此元素意在以机器可读的格式表示日期和时间。 有安排日程表功能的应用可以利用这一点。</td></tr><tr><td align="center">&lt;abbr&gt;</td><td align="center">简称或缩写。</td></tr></tbody></table><a class="btn-beautify button--animated blue right larger" href="https://developer.mozilla.org/zh-CN/"   title="参考的MDN Web docs"><i class="far fa-hand-point-right fa-fw"></i><span>参考的MDN Web docs</span></a>]]></content>
      
      
      <categories>
          
          <category> HTML5 </category>
          
          <category> 系列 </category>
          
          <category> 语义化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> 系列 </tag>
            
            <tag> 语义化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端入门学习路线(自身经历)</title>
      <link href="/2020/08/12/%E5%85%A5%E9%97%A8%E5%89%8D%E6%AE%B5%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E8%87%AA%E8%BA%AB%E7%BB%8F%E5%8E%86/"/>
      <url>/2020/08/12/%E5%85%A5%E9%97%A8%E5%89%8D%E6%AE%B5%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E8%87%AA%E8%BA%AB%E7%BB%8F%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h1 id="思维导图如下-我自己也刚刚学到微信小程序"><a href="#思维导图如下-我自己也刚刚学到微信小程序" class="headerlink" title="思维导图如下(我自己也刚刚学到微信小程序)"></a>思维导图如下(我自己也刚刚学到微信小程序)</h1><h2 id="所有的视频教程只是建议-还要根据自己的情况选择观看-每个教程评论区都有资料基本上"><a href="#所有的视频教程只是建议-还要根据自己的情况选择观看-每个教程评论区都有资料基本上" class="headerlink" title="所有的视频教程只是建议,还要根据自己的情况选择观看(每个教程评论区都有资料基本上)"></a>所有的视频教程只是建议,还要根据自己的情况选择观看(每个教程评论区都有资料基本上)</h2><ul><li><strong><em>注: 思维导图可以拖拽，鼠标滚轮放大(手机也可以)，并且可以点击节点选择是否展开</em></strong></li></ul><!DOCTYPE html><html><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><meta http-equiv="X-UA-Compatible" content="ie=edge"><title>Markmap</title><style>* {  margin: 0;  padding: 0;}#mindmap {  display: block;  width: 90vw;  height: 100vh;}</style></head><body><svg id="mindmap"></svg><script src="https://cdn.jsdelivr.net/npm/d3@5"></script><script src="https://cdn.jsdelivr.net/npm/markmap-lib@0.7.11/dist/browser/view.min.js"></script><script>((data, init, items, opts) => {        const {          Markmap,          loadPlugins        } = window.markmap;        (init ? init(loadPlugins, items, opts) : Promise.resolve()).then(() => {          Markmap.create('svg#mindmap', null, data);        });      })({"t":"heading","d":1,"v":"前端学习路线(个人经历)","c":[{"t":"heading","d":2,"v":"一.基础准备","c":[{"t":"heading","d":3,"v":"1.开发工具的安装与使用(个人推荐vscode,对新手可能不友好)","c":[{"t":"list_item","d":4,"v":"<a href=\"https://code.visualstudio.com/\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">vscode官网下载</a>"},{"t":"list_item","d":4,"v":"<a href=\"https://www.bilibili.com/video/BV1h7411j7ot?from=search&amp;seid=5129875715412834995\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">vscode前端基本使用教程</a>"},{"t":"list_item","d":4,"v":"<a href=\"https://www.bilibili.com/video/BV1ZE411E7LS?from=search&amp;seid=2887835773387108134\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">vscode前端常用插件安装</a>"}]},{"t":"heading","d":3,"v":"2.前端三剑客(前两个HTML和CSS)","c":[{"t":"heading","d":4,"v":"HTML","c":[{"t":"list_item","d":5,"v":"<a href=\"https://www.bilibili.com/video/av78942920/?spm_id_from=333.788.b_636f6d6d656e74.9\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">Pink老师的HTML+CSS基础教程</a>"}]},{"t":"heading","d":4,"v":"CSS","c":[{"t":"list_item","d":5,"v":"<a href=\"https://www.bilibili.com/video/av78942920/?spm_id_from=333.788.b_636f6d6d656e74.9\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">Pink老师的HTML+CSS基础教程</a>"}]}]},{"t":"heading","d":3,"v":"3.项目实战","c":[{"t":"list_item","d":4,"v":"<a href=\"https://www.bilibili.com/video/av80397892/\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">品优购电商项目(很有用)</a>"}]}]},{"t":"heading","d":2,"v":"二.基础进阶","c":[{"t":"heading","d":3,"v":"1.HTML5+CSS新特性","c":[{"t":"list_item","d":4,"v":"<a href=\"https://www.bilibili.com/video/av80398829/\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">Pink老师HTML5+CSS新特性教程</a>"}]},{"t":"heading","d":3,"v":"2.前端布局","c":[{"t":"heading","d":4,"v":"Flex布局","c":[{"t":"list_item","d":5,"v":"<a href=\"https://www.bilibili.com/video/av80403961/\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">Flex布局教程</a>"}]},{"t":"heading","d":4,"v":"Grid网格布局","c":[{"t":"list_item","d":5,"v":"<a href=\"https://www.bilibili.com/video/BV1XJ411G7ec?from=search&amp;seid=16347359822731177066\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">CSS Grid网格布局教程</a>"}]}]},{"t":"heading","d":3,"v":"3.移动端开发","c":[{"t":"list_item","d":4,"v":"<a href=\"https://www.bilibili.com/video/av80404977/\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">web移动端开发教程</a>"}]}]},{"t":"heading","d":2,"v":"三.核心基础","c":[{"t":"heading","d":3,"v":"1.JavaScript基础","c":[{"t":"list_item","d":4,"v":"<a href=\"https://www.bilibili.com/video/av80973606/?spm_id_from=333.788.b_636f6d6d656e74.10\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">Pink老师的JavaScript基础教程</a>"}]},{"t":"heading","d":3,"v":"2.WEB API编程","c":[{"t":"list_item","d":4,"v":"<a href=\"https://www.bilibili.com/video/av80407221/\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">WEB API编程教程</a>"}]},{"t":"heading","d":3,"v":"3.jQuery快速开发(选学,感觉了解下有帮助)","c":[{"t":"list_item","d":4,"v":"<a href=\"https://www.bilibili.com/video/av80409788/\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">jQuery快速开发教程</a>"}]},{"t":"heading","d":3,"v":"4.JavaScript高级(含es6)","c":[{"t":"list_item","d":4,"v":"<a href=\"https://www.bilibili.com/video/av80409940/\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript高级(含es6)教程</a>"}]}]},{"t":"heading","d":2,"v":"四.前后端交互","c":[{"t":"heading","d":3,"v":"1.Node.Js","c":[{"t":"list_item","d":4,"v":"<a href=\"https://www.bilibili.com/video/BV1Bi4y1G7rU?from=search&amp;seid=6454049729894223259\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">Node.js教程</a>"}]},{"t":"heading","d":3,"v":"2.Express服务器","c":[{"t":"list_item","d":4,"v":"<a href=\"https://www.bilibili.com/video/BV1Bi4y1G7rU?from=search&amp;seid=6454049729894223259\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">Express服务器教程</a>"}]},{"t":"heading","d":3,"v":"3.MongoDB数据库和Mongoose使用","c":[{"t":"list_item","d":4,"v":"<a href=\"https://www.bilibili.com/video/BV1Bi4y1G7rU?from=search&amp;seid=6454049729894223259\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">MongoDB数据库和Mongoose使用教程</a>"}]},{"t":"heading","d":3,"v":"4.node实战项目","c":[{"t":"list_item","d":4,"v":"<a href=\"https://www.bilibili.com/video/BV1u7411M7ix?from=search&amp;seid=18297275953701574161\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">node实战博客系统</a>"}]},{"t":"heading","d":3,"v":"5.当然这里可以学其他后端语言比如:java,php等"},{"t":"heading","d":3,"v":"6.前后端交互Git和GitHub","c":[{"t":"list_item","d":4,"v":"<a href=\"https://www.bilibili.com/video/av80413177/\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">前后端交互Git和GitHub教程</a>"}]}]},{"t":"heading","d":2,"v":"五.框架学习","c":[{"t":"heading","d":3,"v":"1.Vue.js学习","c":[{"t":"heading","d":4,"v":"ilovecoding老师的","c":[{"t":"list_item","d":5,"v":"<a href=\"https://www.bilibili.com/video/BV15741177Eh?from=search&amp;seid=10306388444945680121\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">Vue.js(个人看完有点懵)教程</a>"}]},{"t":"heading","d":4,"v":"黑马的","c":[{"t":"list_item","d":5,"v":"<a href=\"https://www.bilibili.com/video/av86673690/?spm_id_from=333.788.b_636f6d6d656e74.14\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">Vue全家桶学习入门到实战教程</a>"}]}]},{"t":"heading","d":3,"v":"2.Vue UI组件库Element UI","c":[{"t":"list_item","d":4,"v":"<a href=\"https://www.bilibili.com/video/BV154411f76X?from=search&amp;seid=4179643273226781099\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">Vue UI组件库Element UI使用教程</a>"}]},{"t":"heading","d":3,"v":"3.Vue实战项目","c":[{"t":"heading","d":4,"v":"电商管理系统(使用了Element-UI)","c":[{"t":"list_item","d":5,"v":"<a href=\"https://www.bilibili.com/video/av77875390/\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">电商管理系统(Element-UI)</a>"}]},{"t":"heading","d":4,"v":"B站移动端","c":[{"t":"list_item","d":5,"v":"<a href=\"https://www.bilibili.com/video/BV1vT4y137So?from=search&amp;seid=9150752861431603248\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">B站移动端从0到1开发</a>"}]}]},{"t":"heading","d":3,"v":"4.微信小程序","c":[{"t":"list_item","d":4,"v":"<a href=\"https://www.bilibili.com/video/BV1nE41117BQ?from=search&amp;seid=8485360474544101469\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">微信小程序教程</a>"}]},{"t":"heading","d":3,"v":"5.其他框架","c":[{"t":"heading","d":4,"v":"React框架","c":[{"t":"list_item","d":5,"v":"<a href=\"https://www.bilibili.com/video/BV1m741137Q5?from=search&amp;seid=13845987059175448915\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">React框架教程</a>"}]},{"t":"heading","d":4,"v":"Angular框架","c":[{"t":"list_item","d":5,"v":"<a href=\"https://www.bilibili.com/video/BV1i741157Fj/?spm_id_from=333.788.b_636f6d6d656e74.14\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">Angular框架教程</a>"}]}]}]}]})</script></body></html><a class="btn-beautify button--animated blue right larger" href="/"   title="小何blog"><i class="far fa-hand-point-right fa-fw"></i><span>小何blog</span></a>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 入门 </category>
          
          <category> 学习路线 </category>
          
          <category> 思维导图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 学习路线 </tag>
            
            <tag> 入门 </tag>
            
            <tag> 思维导图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo常用命令</title>
      <link href="/2020/08/11/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/08/11/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-大约有二十多个命令，对于普通用户经常使用的有一下几个"><a href="#Hexo-大约有二十多个命令，对于普通用户经常使用的有一下几个" class="headerlink" title="Hexo 大约有二十多个命令，对于普通用户经常使用的有一下几个:"></a>Hexo 大约有二十多个命令，对于普通用户经常使用的有一下几个:</h1><h2 id="1-hexo-new"><a href="#1-hexo-new" class="headerlink" title="1.hexo new"></a>1.hexo new</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">例子:</span><br><span class="line"></span><br><span class="line">hexo <span class="keyword">new</span> <span class="string">&quot;hexo 常用命令&quot;</span></span><br><span class="line">hexo <span class="keyword">new</span> hexo常用命令</span><br><span class="line">hexo <span class="keyword">new</span>  draft <span class="string">&quot;草稿文章&quot;</span></span><br></pre></td></tr></table></figure><ul><li><h3 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h3><p>新建一篇标题为 hexo 常用命令 的文章</p><p>新建一篇标题为 hexo常用命令 的文章</p><p>新建草稿文章，draft 为草稿文档，不会展现在博客上，可用hexo publish “草稿文章” 发布为正式文章</p></li></ul><h5 id="注-：如果文章标题有空格需要加引号"><a href="#注-：如果文章标题有空格需要加引号" class="headerlink" title="注 ：如果文章标题有空格需要加引号"></a>注 ：如果文章标题有空格需要加引号</h5><ul><li><h3 id="缩写："><a href="#缩写：" class="headerlink" title="缩写："></a>缩写：</h3><blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo n <span class="string">&quot;hexo 常用命令&quot;</span></span><br></pre></td></tr></table></figure></blockquote></li></ul><hr><h2 id="2-hexo-new-page"><a href="#2-hexo-new-page" class="headerlink" title="2.hexo new page"></a>2.<strong>hexo new page</strong></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">例子:</span><br><span class="line"></span><br><span class="line">hexo <span class="keyword">new</span> page music</span><br></pre></td></tr></table></figure><ul><li><h3 id="解释"><a href="#解释" class="headerlink" title="解释:"></a>解释:</h3><p>新建一个标题为 music 的页面，默认地址链接为: 主页地址/music/</p></li></ul><h4 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h4><ol><li>标题可以为中文，但一般习惯用英文；</li><li>页面标题和文章一样，可以修改；</li><li>页面不会出现在首页文章列表和归档中，也不支持设置分类和标签。</li></ol><h2 id="3-hexo-deploy"><a href="#3-hexo-deploy" class="headerlink" title="3.hexo deploy"></a>3.hexo deploy</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">例子:</span><br><span class="line"></span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><ul><li><h3 id="解释-1"><a href="#解释-1" class="headerlink" title="解释:"></a>解释:</h3><p>自动生成网站静态文件，并部署到设定的仓库。</p></li><li><h3 id="缩写"><a href="#缩写" class="headerlink" title="缩写:"></a>缩写:</h3><blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></blockquote></li></ul><h2 id="4-hexo-generate"><a href="#4-hexo-generate" class="headerlink" title="4.hexo generate"></a>4.hexo generate</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">例子:</span><br><span class="line"></span><br><span class="line">hexo generate</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><ul><li><h3 id="解释-2"><a href="#解释-2" class="headerlink" title="解释:"></a>解释:</h3><p>生成网站静态文件在默认设置的 public 文件夹。</p></li></ul>  <img src= "/img/loading.gif" data-lazy-src="http://qew58kkb2.hn-bkt.clouddn.com/public.png" alt="public文件夹" style="zoom: 200%;" /><h4 id="注"><a href="#注" class="headerlink" title="注:"></a>注:</h4><ol><li>便于查看网站生成的静态文件或者手动部署网站；</li><li>如果使用自动部署，不需要先执行该命令。</li></ol><ul><li><h3 id="缩写-1"><a href="#缩写-1" class="headerlink" title="缩写:"></a>缩写:</h3><blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></blockquote></li></ul><h2 id="5-hexo-server"><a href="#5-hexo-server" class="headerlink" title="5.hexo server"></a>5.hexo server</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">例子:</span><br><span class="line"></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><ul><li><h3 id="解释-3"><a href="#解释-3" class="headerlink" title="解释:"></a>解释:</h3><p>启动本地服务器，用于预览主题。默认地址： <a href="http://localhost:4000/">http://localhost:4000/</a></p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="http://qew58kkb2.hn-bkt.clouddn.com/url.png" alt="url"></p><h4 id="注-1"><a href="#注-1" class="headerlink" title="注:"></a>注:</h4><ol><li>预览的同时可以修改文章内容或主题代码，保存后刷新页面即可；</li><li>对 Hexo 根目录 _config.yml 的修改，需要重启本地服务器后才能预览效果。</li></ol><ul><li><h3 id="缩写-2"><a href="#缩写-2" class="headerlink" title="缩写:"></a>缩写:</h3><blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></blockquote></li></ul><h2 id="6-hexo-clean"><a href="#6-hexo-clean" class="headerlink" title="6.hexo clean"></a>6.hexo clean</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">例子:</span><br><span class="line"></span><br><span class="line">hexo clean</span><br></pre></td></tr></table></figure><ul><li><h3 id="解释-4"><a href="#解释-4" class="headerlink" title="解释:"></a>解释:</h3><ol><li>清除缓存文件 db.json 和已生成的静态文件 public ;</li><li>网站显示异常时可以执行这条命令。</li></ol></li></ul><h2 id="7-hexo-init"><a href="#7-hexo-init" class="headerlink" title="7.hexo init"></a>7.hexo init</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">例子:</span><br><span class="line"></span><br><span class="line">hexo init [folder]</span><br></pre></td></tr></table></figure><ul><li><h3 id="解释-5"><a href="#解释-5" class="headerlink" title="解释:"></a>解释:</h3><p>命令用于初始化本地文件夹为网站的根目录</p></li></ul><h4 id="注-2"><a href="#注-2" class="headerlink" title="注:"></a>注:</h4><ul><li><code>folder</code> 可选参数，用以指定初始化目录的路径，若无指定则默认为当前目录</li></ul><h2 id="8-详细请参考"><a href="#8-详细请参考" class="headerlink" title="8.详细请参考"></a>8.详细请参考</h2><h4 id="以上只是常用的命令-详细命令请参考官方文档，不足之处请指出。"><a href="#以上只是常用的命令-详细命令请参考官方文档，不足之处请指出。" class="headerlink" title="以上只是常用的命令,详细命令请参考官方文档，不足之处请指出。"></a>以上只是常用的命令,详细命令请参考官方文档，不足之处请指出。</h4><h3 id="Hexo官方文档"><a href="#Hexo官方文档" class="headerlink" title="Hexo官方文档"></a><a href="https://hexo.io/api/">Hexo官方文档</a></h3><a class="btn-beautify button--animated blue right larger" href="/"   title="小何blog"><i class="far fa-hand-point-right fa-fw"></i><span>小何blog</span></a>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
          <category> 常用 </category>
          
          <category> 命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 命令代码 </tag>
            
            <tag> 常用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基础语法</title>
      <link href="/2020/08/10/Markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/08/10/Markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1-代码块语法"><a href="#1-代码块语法" class="headerlink" title="1. 代码块语法"></a>1. 代码块语法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">​<span class="string">``</span><span class="string">` +语言+回车</span></span><br></pre></td></tr></table></figure><h3 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下:"></a>效果如下:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="2-标题语法"><a href="#2-标题语法" class="headerlink" title="2.标题语法"></a>2.标题语法</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">* 一级标题: #+空格+内容+回车</span><br><span class="line">* 二级标题: ##+空格+内容+回车</span><br><span class="line">* 三级标题: ###+空格+内容+回车</span><br><span class="line">* 四级标题: ####+空格+内容+回车</span><br><span class="line">* 五级标题: #####+空格+内容+回车</span><br><span class="line">* 六级标题: ######+空格+内容+回车</span><br></pre></td></tr></table></figure><h3 id="效果如下-1"><a href="#效果如下-1" class="headerlink" title="效果如下:"></a>效果如下:</h3><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><hr><h2 id="3-字体语法"><a href="#3-字体语法" class="headerlink" title="3. 字体语法"></a>3. 字体语法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>加粗: **内容**</span><br><span class="line"><span class="number">2.</span>删除线: ~~内容~~</span><br><span class="line"><span class="number">3.</span>斜体: *内容*</span><br><span class="line"><span class="number">4.</span>加粗斜体:***内容***</span><br><span class="line"><span class="number">5.</span>高亮: ==内容==</span><br></pre></td></tr></table></figure><h3 id="效果如下："><a href="#效果如下：" class="headerlink" title="效果如下："></a>效果如下：</h3><p><strong>加粗</strong></p><p><del>删除线</del></p><p><em>斜体</em></p><p><strong><em>加粗斜体</em></strong></p><p>==高亮==</p><hr><h2 id="4-引用语法"><a href="#4-引用语法" class="headerlink" title="4.引用语法"></a>4.引用语法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">* 一级引用: &gt;内容</span><br><span class="line">* 二级引用: &gt;&gt;内容</span><br><span class="line">* 三级引用: &gt;&gt;&gt;内容</span><br><span class="line">......以此类推</span><br><span class="line">可以有多个 &gt;，&gt;越多表示层级更深</span><br></pre></td></tr></table></figure><h3 id="效果如下-2"><a href="#效果如下-2" class="headerlink" title="效果如下:"></a>效果如下:</h3><blockquote><p>一级引用</p><blockquote><p>二级引用</p><blockquote><p>三级引用</p><blockquote><p>四级引用</p><blockquote><p>五级引用</p></blockquote></blockquote></blockquote></blockquote></blockquote><hr><h2 id="5-分割线语法"><a href="#5-分割线语法" class="headerlink" title="5.分割线语法"></a>5.分割线语法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">使用三个或以上的 - 或者 * 表示。</span><br><span class="line"><span class="number">1.</span>---或者-----</span><br><span class="line"><span class="number">2.</span>***或者*******</span><br></pre></td></tr></table></figure><h3 id="效果如下-3"><a href="#效果如下-3" class="headerlink" title="效果如下:"></a>效果如下:</h3><hr><hr><hr><hr><h2 id="6-图片插入语法"><a href="#6-图片插入语法" class="headerlink" title="6.图片插入语法"></a>6.图片插入语法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">![alt](url <span class="string">&#x27;title&#x27;</span>)</span><br><span class="line"></span><br><span class="line">alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">url是图片的路径(可以是本地路径或在线路径)</span><br><span class="line">title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br><span class="line"></span><br><span class="line">代码示例:</span><br><span class="line">![鬼灭之刃](http:<span class="comment">//qew58kkb2.hn-bkt.clouddn.com/timg%20%281%29.jpg?e=1597139745&amp;token=kdAyr1YUXsnFJ9Am35m8DHrclb0JlKQ_LSwtOAqU:4XSbhetHHlbBVYVP6EoYWZGU4Dc= &#x27;鬼灭之刃&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="效果如下-4"><a href="#效果如下-4" class="headerlink" title="效果如下:"></a>效果如下:</h3><p><img src= "/img/loading.gif" data-lazy-src="http://qew58kkb2.hn-bkt.clouddn.com/timg%20%281%29.jpg?e=1597139745&token=kdAyr1YUXsnFJ9Am35m8DHrclb0JlKQ_LSwtOAqU:4XSbhetHHlbBVYVP6EoYWZGU4Dc=" alt="鬼灭之刃" title="鬼灭之刃"></p><h2 id="7-超链接语法"><a href="#7-超链接语法" class="headerlink" title="7.超链接语法"></a>7.超链接语法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[超链接名](超链接地址 <span class="string">&#x27;超链接title&#x27;</span>)</span><br><span class="line"></span><br><span class="line">title是超链接的标题，当鼠标移到链接上时显示的内容。title可加可不加</span><br><span class="line"></span><br><span class="line">代码示例:</span><br><span class="line">[B站](https:<span class="comment">//www.bilibili.com/ &#x27;B站&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="效果如下-5"><a href="#效果如下-5" class="headerlink" title="效果如下:"></a>效果如下:</h3><p><a href="https://www.bilibili.com/" title="B站">B站</a></p><p>注：Markdown本身语法不支持链接在新页面中打开</p><h2 id="8-列表语法"><a href="#8-列表语法" class="headerlink" title="8.列表语法"></a>8.列表语法</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表:"></a>无序列表:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-&lt;空格&gt;列表内容</span><br><span class="line">+&lt;空格&gt;列表内容</span><br><span class="line">*&lt;空格&gt;列表内容</span><br><span class="line"></span><br><span class="line">注：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure><h4 id="效果如下-6"><a href="#效果如下-6" class="headerlink" title="效果如下:"></a>效果如下:</h4><ul><li>无序列表1</li><li>无序列表2</li><li>无序列表3 </li></ul><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表:"></a>有序列表:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">数字+.+空格+列表内容</span><br><span class="line"></span><br><span class="line">注：.跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure><h4 id="效果如下-7"><a href="#效果如下-7" class="headerlink" title="效果如下:"></a>效果如下:</h4><ol><li>有序列表1</li><li>有序列表2</li><li>有序列表3</li></ol><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套:"></a>列表嵌套:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">在父层的基础上，子层在开头加<span class="number">1</span>个Tab即可。</span><br><span class="line"></span><br><span class="line">注: 不同的编辑器有不同效果，本方法在Typoea上适用。</span><br></pre></td></tr></table></figure><h4 id="效果如下-8"><a href="#效果如下-8" class="headerlink" title="效果如下:"></a>效果如下:</h4><ul><li>无序列表1<ul><li>无序列表1-1<ul><li>无序列表1-1-1<ul><li>无序列表1-1-1-1</li><li>无序列表1-1-1-2</li></ul></li></ul></li></ul></li></ul><ol><li>有序列表<ol><li>有序列表<ol><li>有序列表<ol><li>有序列表</li><li>有序列表</li></ol></li></ol></li></ol></li></ol><ul><li>无序列表1<ol><li>有序列表1-1<ul><li>无序列表1-1-1<ol start="2"><li>有序列表1-1-1-1</li></ol></li></ul></li></ol></li></ul><h2 id="9-表格语法"><a href="#9-表格语法" class="headerlink" title="9.表格语法"></a>9.表格语法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">|表头|表头|表头|</span><br><span class="line">|---|:--:|---:|</span><br><span class="line">|内容|内容|内容|</span><br><span class="line">|内容|内容|内容|</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有<span class="number">1</span>个就可以，为了美观，可以多加几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line"></span><br><span class="line">代码示例:</span><br><span class="line">|姓名|技能|关系|</span><br><span class="line">|--|:--:|--:|</span><br><span class="line">|亚索|戳|第|</span><br><span class="line">|永恩|戳|哥|</span><br><span class="line">|阿狸|魅惑|没关系|</span><br></pre></td></tr></table></figure><h3 id="效果如下-9"><a href="#效果如下-9" class="headerlink" title="效果如下:"></a>效果如下:</h3><table><thead><tr><th>姓名</th><th align="center">技能</th><th align="right">关系</th></tr></thead><tbody><tr><td>亚索</td><td align="center">戳</td><td align="right">第</td></tr><tr><td>永恩</td><td align="center">戳</td><td align="right">哥</td></tr><tr><td>阿狸</td><td align="center">魅惑</td><td align="right">没关系</td></tr></tbody></table><p>注:  如果使用编译器(比如Typora)可以用快捷键提高效率，新手建议还是先手敲。</p><h2 id="10其他"><a href="#10其他" class="headerlink" title="10其他"></a>10其他</h2><p>至于其他的流程图和代码块，代码这部分，因为比较少用，以上是常用的Markdown语法,有兴趣的话可以去<a href="http://markdownpad.com/">官网</a>或者<a href="https://markdown-zh.readthedocs.io/en/latest/">中文文档</a>学习</p><h3 id="以上是我学习总结的内容，有不足的地方欢迎补充。"><a href="#以上是我学习总结的内容，有不足的地方欢迎补充。" class="headerlink" title="以上是我学习总结的内容，有不足的地方欢迎补充。"></a>以上是我学习总结的内容，有不足的地方欢迎补充。</h3><a class="btn-beautify button--animated blue right larger" href="/"   title="小何blog"><i class="far fa-hand-point-right fa-fw"></i><span>小何blog</span></a>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
          <category> 快速入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 快速 </tag>
            
            <tag> 必备 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
